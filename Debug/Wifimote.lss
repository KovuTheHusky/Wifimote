
Wifimote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000424  00800100  00001bb4  00001c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800524  00800524  0000206c  2**0
                  ALLOC
  3 .stab         00001ff8  00000000  00000000  0000206c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000153a  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000680  00000000  00000000  0000559e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000dc5  00000000  00000000  00005c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007a3c  00000000  00000000  000069e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023ac  00000000  00000000  0000e41f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f2a  00000000  00000000  000107cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a80  00000000  00000000  000146f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000193a  00000000  00000000  00015178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000414e  00000000  00000000  00016ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000508  00000000  00000000  0001ac00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_18>
      4c:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	80 0b       	sbc	r24, r16

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	15 e0       	ldi	r17, 0x05	; 5
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e4 eb       	ldi	r30, 0xB4	; 180
      d8:	fb e1       	ldi	r31, 0x1B	; 27
      da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	a4 32       	cpi	r26, 0x24	; 36
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
      e6:	15 e0       	ldi	r17, 0x05	; 5
      e8:	a4 e2       	ldi	r26, 0x24	; 36
      ea:	b5 e0       	ldi	r27, 0x05	; 5
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a4 3d       	cpi	r26, 0xD4	; 212
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__tablejump__>

00000106 <.do_global_ctors_start>:
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
     10c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <main>
     110:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <__fixunssfsi>:
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	7b 01       	movw	r14, r22
     122:	8c 01       	movw	r16, r24
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	5f e4       	ldi	r21, 0x4F	; 79
     12c:	0e 94 08 04 	call	0x810	; 0x810 <__gesf2>
     130:	88 23       	and	r24, r24
     132:	8c f0       	brlt	.+34     	; 0x156 <__fixunssfsi+0x3e>
     134:	c8 01       	movw	r24, r16
     136:	b7 01       	movw	r22, r14
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e0       	ldi	r20, 0x00	; 0
     13e:	5f e4       	ldi	r21, 0x4F	; 79
     140:	0e 94 04 02 	call	0x408	; 0x408 <__subsf3>
     144:	0e 94 38 04 	call	0x870	; 0x870 <__fixsfsi>
     148:	9b 01       	movw	r18, r22
     14a:	ac 01       	movw	r20, r24
     14c:	20 50       	subi	r18, 0x00	; 0
     14e:	30 40       	sbci	r19, 0x00	; 0
     150:	40 40       	sbci	r20, 0x00	; 0
     152:	50 48       	sbci	r21, 0x80	; 128
     154:	06 c0       	rjmp	.+12     	; 0x162 <__fixunssfsi+0x4a>
     156:	c8 01       	movw	r24, r16
     158:	b7 01       	movw	r22, r14
     15a:	0e 94 38 04 	call	0x870	; 0x870 <__fixsfsi>
     15e:	9b 01       	movw	r18, r22
     160:	ac 01       	movw	r20, r24
     162:	b9 01       	movw	r22, r18
     164:	ca 01       	movw	r24, r20
     166:	1f 91       	pop	r17
     168:	0f 91       	pop	r16
     16a:	ff 90       	pop	r15
     16c:	ef 90       	pop	r14
     16e:	08 95       	ret

00000170 <_fpadd_parts>:
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	ee eb       	ldi	r30, 0xBE	; 190
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__prologue_saves__>
     17c:	dc 01       	movw	r26, r24
     17e:	2b 01       	movw	r4, r22
     180:	fa 01       	movw	r30, r20
     182:	9c 91       	ld	r25, X
     184:	92 30       	cpi	r25, 0x02	; 2
     186:	08 f4       	brcc	.+2      	; 0x18a <_fpadd_parts+0x1a>
     188:	39 c1       	rjmp	.+626    	; 0x3fc <_fpadd_parts+0x28c>
     18a:	eb 01       	movw	r28, r22
     18c:	88 81       	ld	r24, Y
     18e:	82 30       	cpi	r24, 0x02	; 2
     190:	08 f4       	brcc	.+2      	; 0x194 <_fpadd_parts+0x24>
     192:	33 c1       	rjmp	.+614    	; 0x3fa <_fpadd_parts+0x28a>
     194:	94 30       	cpi	r25, 0x04	; 4
     196:	69 f4       	brne	.+26     	; 0x1b2 <_fpadd_parts+0x42>
     198:	84 30       	cpi	r24, 0x04	; 4
     19a:	09 f0       	breq	.+2      	; 0x19e <_fpadd_parts+0x2e>
     19c:	2f c1       	rjmp	.+606    	; 0x3fc <_fpadd_parts+0x28c>
     19e:	11 96       	adiw	r26, 0x01	; 1
     1a0:	9c 91       	ld	r25, X
     1a2:	11 97       	sbiw	r26, 0x01	; 1
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	98 17       	cp	r25, r24
     1a8:	09 f4       	brne	.+2      	; 0x1ac <_fpadd_parts+0x3c>
     1aa:	28 c1       	rjmp	.+592    	; 0x3fc <_fpadd_parts+0x28c>
     1ac:	a8 e3       	ldi	r26, 0x38	; 56
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	25 c1       	rjmp	.+586    	; 0x3fc <_fpadd_parts+0x28c>
     1b2:	84 30       	cpi	r24, 0x04	; 4
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <_fpadd_parts+0x48>
     1b6:	21 c1       	rjmp	.+578    	; 0x3fa <_fpadd_parts+0x28a>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	a9 f4       	brne	.+42     	; 0x1e6 <_fpadd_parts+0x76>
     1bc:	92 30       	cpi	r25, 0x02	; 2
     1be:	09 f0       	breq	.+2      	; 0x1c2 <_fpadd_parts+0x52>
     1c0:	1d c1       	rjmp	.+570    	; 0x3fc <_fpadd_parts+0x28c>
     1c2:	9a 01       	movw	r18, r20
     1c4:	ad 01       	movw	r20, r26
     1c6:	88 e0       	ldi	r24, 0x08	; 8
     1c8:	ea 01       	movw	r28, r20
     1ca:	09 90       	ld	r0, Y+
     1cc:	ae 01       	movw	r20, r28
     1ce:	e9 01       	movw	r28, r18
     1d0:	09 92       	st	Y+, r0
     1d2:	9e 01       	movw	r18, r28
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	c1 f7       	brne	.-16     	; 0x1c8 <_fpadd_parts+0x58>
     1d8:	e2 01       	movw	r28, r4
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	11 96       	adiw	r26, 0x01	; 1
     1de:	9c 91       	ld	r25, X
     1e0:	89 23       	and	r24, r25
     1e2:	81 83       	std	Z+1, r24	; 0x01
     1e4:	08 c1       	rjmp	.+528    	; 0x3f6 <_fpadd_parts+0x286>
     1e6:	92 30       	cpi	r25, 0x02	; 2
     1e8:	09 f4       	brne	.+2      	; 0x1ec <_fpadd_parts+0x7c>
     1ea:	07 c1       	rjmp	.+526    	; 0x3fa <_fpadd_parts+0x28a>
     1ec:	12 96       	adiw	r26, 0x02	; 2
     1ee:	2d 90       	ld	r2, X+
     1f0:	3c 90       	ld	r3, X
     1f2:	13 97       	sbiw	r26, 0x03	; 3
     1f4:	eb 01       	movw	r28, r22
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	9b 81       	ldd	r25, Y+3	; 0x03
     1fa:	14 96       	adiw	r26, 0x04	; 4
     1fc:	ad 90       	ld	r10, X+
     1fe:	bd 90       	ld	r11, X+
     200:	cd 90       	ld	r12, X+
     202:	dc 90       	ld	r13, X
     204:	17 97       	sbiw	r26, 0x07	; 7
     206:	ec 80       	ldd	r14, Y+4	; 0x04
     208:	fd 80       	ldd	r15, Y+5	; 0x05
     20a:	0e 81       	ldd	r16, Y+6	; 0x06
     20c:	1f 81       	ldd	r17, Y+7	; 0x07
     20e:	91 01       	movw	r18, r2
     210:	28 1b       	sub	r18, r24
     212:	39 0b       	sbc	r19, r25
     214:	b9 01       	movw	r22, r18
     216:	37 ff       	sbrs	r19, 7
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0xb2>
     21a:	66 27       	eor	r22, r22
     21c:	77 27       	eor	r23, r23
     21e:	62 1b       	sub	r22, r18
     220:	73 0b       	sbc	r23, r19
     222:	60 32       	cpi	r22, 0x20	; 32
     224:	71 05       	cpc	r23, r1
     226:	0c f0       	brlt	.+2      	; 0x22a <_fpadd_parts+0xba>
     228:	61 c0       	rjmp	.+194    	; 0x2ec <_fpadd_parts+0x17c>
     22a:	12 16       	cp	r1, r18
     22c:	13 06       	cpc	r1, r19
     22e:	6c f5       	brge	.+90     	; 0x28a <_fpadd_parts+0x11a>
     230:	37 01       	movw	r6, r14
     232:	48 01       	movw	r8, r16
     234:	06 2e       	mov	r0, r22
     236:	04 c0       	rjmp	.+8      	; 0x240 <_fpadd_parts+0xd0>
     238:	96 94       	lsr	r9
     23a:	87 94       	ror	r8
     23c:	77 94       	ror	r7
     23e:	67 94       	ror	r6
     240:	0a 94       	dec	r0
     242:	d2 f7       	brpl	.-12     	; 0x238 <_fpadd_parts+0xc8>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	04 c0       	rjmp	.+8      	; 0x256 <_fpadd_parts+0xe6>
     24e:	22 0f       	add	r18, r18
     250:	33 1f       	adc	r19, r19
     252:	44 1f       	adc	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	d2 f7       	brpl	.-12     	; 0x24e <_fpadd_parts+0xde>
     25a:	21 50       	subi	r18, 0x01	; 1
     25c:	30 40       	sbci	r19, 0x00	; 0
     25e:	40 40       	sbci	r20, 0x00	; 0
     260:	50 40       	sbci	r21, 0x00	; 0
     262:	2e 21       	and	r18, r14
     264:	3f 21       	and	r19, r15
     266:	40 23       	and	r20, r16
     268:	51 23       	and	r21, r17
     26a:	21 15       	cp	r18, r1
     26c:	31 05       	cpc	r19, r1
     26e:	41 05       	cpc	r20, r1
     270:	51 05       	cpc	r21, r1
     272:	21 f0       	breq	.+8      	; 0x27c <_fpadd_parts+0x10c>
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	79 01       	movw	r14, r18
     27e:	8a 01       	movw	r16, r20
     280:	e6 28       	or	r14, r6
     282:	f7 28       	or	r15, r7
     284:	08 29       	or	r16, r8
     286:	19 29       	or	r17, r9
     288:	3c c0       	rjmp	.+120    	; 0x302 <_fpadd_parts+0x192>
     28a:	23 2b       	or	r18, r19
     28c:	d1 f1       	breq	.+116    	; 0x302 <_fpadd_parts+0x192>
     28e:	26 0e       	add	r2, r22
     290:	37 1e       	adc	r3, r23
     292:	35 01       	movw	r6, r10
     294:	46 01       	movw	r8, r12
     296:	06 2e       	mov	r0, r22
     298:	04 c0       	rjmp	.+8      	; 0x2a2 <_fpadd_parts+0x132>
     29a:	96 94       	lsr	r9
     29c:	87 94       	ror	r8
     29e:	77 94       	ror	r7
     2a0:	67 94       	ror	r6
     2a2:	0a 94       	dec	r0
     2a4:	d2 f7       	brpl	.-12     	; 0x29a <_fpadd_parts+0x12a>
     2a6:	21 e0       	ldi	r18, 0x01	; 1
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_fpadd_parts+0x148>
     2b0:	22 0f       	add	r18, r18
     2b2:	33 1f       	adc	r19, r19
     2b4:	44 1f       	adc	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	6a 95       	dec	r22
     2ba:	d2 f7       	brpl	.-12     	; 0x2b0 <_fpadd_parts+0x140>
     2bc:	21 50       	subi	r18, 0x01	; 1
     2be:	30 40       	sbci	r19, 0x00	; 0
     2c0:	40 40       	sbci	r20, 0x00	; 0
     2c2:	50 40       	sbci	r21, 0x00	; 0
     2c4:	2a 21       	and	r18, r10
     2c6:	3b 21       	and	r19, r11
     2c8:	4c 21       	and	r20, r12
     2ca:	5d 21       	and	r21, r13
     2cc:	21 15       	cp	r18, r1
     2ce:	31 05       	cpc	r19, r1
     2d0:	41 05       	cpc	r20, r1
     2d2:	51 05       	cpc	r21, r1
     2d4:	21 f0       	breq	.+8      	; 0x2de <_fpadd_parts+0x16e>
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	59 01       	movw	r10, r18
     2e0:	6a 01       	movw	r12, r20
     2e2:	a6 28       	or	r10, r6
     2e4:	b7 28       	or	r11, r7
     2e6:	c8 28       	or	r12, r8
     2e8:	d9 28       	or	r13, r9
     2ea:	0b c0       	rjmp	.+22     	; 0x302 <_fpadd_parts+0x192>
     2ec:	82 15       	cp	r24, r2
     2ee:	93 05       	cpc	r25, r3
     2f0:	2c f0       	brlt	.+10     	; 0x2fc <_fpadd_parts+0x18c>
     2f2:	1c 01       	movw	r2, r24
     2f4:	aa 24       	eor	r10, r10
     2f6:	bb 24       	eor	r11, r11
     2f8:	65 01       	movw	r12, r10
     2fa:	03 c0       	rjmp	.+6      	; 0x302 <_fpadd_parts+0x192>
     2fc:	ee 24       	eor	r14, r14
     2fe:	ff 24       	eor	r15, r15
     300:	87 01       	movw	r16, r14
     302:	11 96       	adiw	r26, 0x01	; 1
     304:	9c 91       	ld	r25, X
     306:	d2 01       	movw	r26, r4
     308:	11 96       	adiw	r26, 0x01	; 1
     30a:	8c 91       	ld	r24, X
     30c:	98 17       	cp	r25, r24
     30e:	09 f4       	brne	.+2      	; 0x312 <_fpadd_parts+0x1a2>
     310:	45 c0       	rjmp	.+138    	; 0x39c <_fpadd_parts+0x22c>
     312:	99 23       	and	r25, r25
     314:	39 f0       	breq	.+14     	; 0x324 <_fpadd_parts+0x1b4>
     316:	a8 01       	movw	r20, r16
     318:	97 01       	movw	r18, r14
     31a:	2a 19       	sub	r18, r10
     31c:	3b 09       	sbc	r19, r11
     31e:	4c 09       	sbc	r20, r12
     320:	5d 09       	sbc	r21, r13
     322:	06 c0       	rjmp	.+12     	; 0x330 <_fpadd_parts+0x1c0>
     324:	a6 01       	movw	r20, r12
     326:	95 01       	movw	r18, r10
     328:	2e 19       	sub	r18, r14
     32a:	3f 09       	sbc	r19, r15
     32c:	40 0b       	sbc	r20, r16
     32e:	51 0b       	sbc	r21, r17
     330:	57 fd       	sbrc	r21, 7
     332:	08 c0       	rjmp	.+16     	; 0x344 <_fpadd_parts+0x1d4>
     334:	11 82       	std	Z+1, r1	; 0x01
     336:	33 82       	std	Z+3, r3	; 0x03
     338:	22 82       	std	Z+2, r2	; 0x02
     33a:	24 83       	std	Z+4, r18	; 0x04
     33c:	35 83       	std	Z+5, r19	; 0x05
     33e:	46 83       	std	Z+6, r20	; 0x06
     340:	57 83       	std	Z+7, r21	; 0x07
     342:	1d c0       	rjmp	.+58     	; 0x37e <_fpadd_parts+0x20e>
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	81 83       	std	Z+1, r24	; 0x01
     348:	33 82       	std	Z+3, r3	; 0x03
     34a:	22 82       	std	Z+2, r2	; 0x02
     34c:	88 27       	eor	r24, r24
     34e:	99 27       	eor	r25, r25
     350:	dc 01       	movw	r26, r24
     352:	82 1b       	sub	r24, r18
     354:	93 0b       	sbc	r25, r19
     356:	a4 0b       	sbc	r26, r20
     358:	b5 0b       	sbc	r27, r21
     35a:	84 83       	std	Z+4, r24	; 0x04
     35c:	95 83       	std	Z+5, r25	; 0x05
     35e:	a6 83       	std	Z+6, r26	; 0x06
     360:	b7 83       	std	Z+7, r27	; 0x07
     362:	0d c0       	rjmp	.+26     	; 0x37e <_fpadd_parts+0x20e>
     364:	22 0f       	add	r18, r18
     366:	33 1f       	adc	r19, r19
     368:	44 1f       	adc	r20, r20
     36a:	55 1f       	adc	r21, r21
     36c:	24 83       	std	Z+4, r18	; 0x04
     36e:	35 83       	std	Z+5, r19	; 0x05
     370:	46 83       	std	Z+6, r20	; 0x06
     372:	57 83       	std	Z+7, r21	; 0x07
     374:	82 81       	ldd	r24, Z+2	; 0x02
     376:	93 81       	ldd	r25, Z+3	; 0x03
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	93 83       	std	Z+3, r25	; 0x03
     37c:	82 83       	std	Z+2, r24	; 0x02
     37e:	24 81       	ldd	r18, Z+4	; 0x04
     380:	35 81       	ldd	r19, Z+5	; 0x05
     382:	46 81       	ldd	r20, Z+6	; 0x06
     384:	57 81       	ldd	r21, Z+7	; 0x07
     386:	da 01       	movw	r26, r20
     388:	c9 01       	movw	r24, r18
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	a1 09       	sbc	r26, r1
     38e:	b1 09       	sbc	r27, r1
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	9f 4f       	sbci	r25, 0xFF	; 255
     394:	af 4f       	sbci	r26, 0xFF	; 255
     396:	bf 43       	sbci	r27, 0x3F	; 63
     398:	28 f3       	brcs	.-54     	; 0x364 <_fpadd_parts+0x1f4>
     39a:	0b c0       	rjmp	.+22     	; 0x3b2 <_fpadd_parts+0x242>
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	33 82       	std	Z+3, r3	; 0x03
     3a0:	22 82       	std	Z+2, r2	; 0x02
     3a2:	ea 0c       	add	r14, r10
     3a4:	fb 1c       	adc	r15, r11
     3a6:	0c 1d       	adc	r16, r12
     3a8:	1d 1d       	adc	r17, r13
     3aa:	e4 82       	std	Z+4, r14	; 0x04
     3ac:	f5 82       	std	Z+5, r15	; 0x05
     3ae:	06 83       	std	Z+6, r16	; 0x06
     3b0:	17 83       	std	Z+7, r17	; 0x07
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	80 83       	st	Z, r24
     3b6:	24 81       	ldd	r18, Z+4	; 0x04
     3b8:	35 81       	ldd	r19, Z+5	; 0x05
     3ba:	46 81       	ldd	r20, Z+6	; 0x06
     3bc:	57 81       	ldd	r21, Z+7	; 0x07
     3be:	57 ff       	sbrs	r21, 7
     3c0:	1a c0       	rjmp	.+52     	; 0x3f6 <_fpadd_parts+0x286>
     3c2:	c9 01       	movw	r24, r18
     3c4:	aa 27       	eor	r26, r26
     3c6:	97 fd       	sbrc	r25, 7
     3c8:	a0 95       	com	r26
     3ca:	ba 2f       	mov	r27, r26
     3cc:	81 70       	andi	r24, 0x01	; 1
     3ce:	90 70       	andi	r25, 0x00	; 0
     3d0:	a0 70       	andi	r26, 0x00	; 0
     3d2:	b0 70       	andi	r27, 0x00	; 0
     3d4:	56 95       	lsr	r21
     3d6:	47 95       	ror	r20
     3d8:	37 95       	ror	r19
     3da:	27 95       	ror	r18
     3dc:	82 2b       	or	r24, r18
     3de:	93 2b       	or	r25, r19
     3e0:	a4 2b       	or	r26, r20
     3e2:	b5 2b       	or	r27, r21
     3e4:	84 83       	std	Z+4, r24	; 0x04
     3e6:	95 83       	std	Z+5, r25	; 0x05
     3e8:	a6 83       	std	Z+6, r26	; 0x06
     3ea:	b7 83       	std	Z+7, r27	; 0x07
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	93 83       	std	Z+3, r25	; 0x03
     3f4:	82 83       	std	Z+2, r24	; 0x02
     3f6:	df 01       	movw	r26, r30
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <_fpadd_parts+0x28c>
     3fa:	d2 01       	movw	r26, r4
     3fc:	cd 01       	movw	r24, r26
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	e2 e1       	ldi	r30, 0x12	; 18
     404:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__epilogue_restores__>

00000408 <__subsf3>:
     408:	a0 e2       	ldi	r26, 0x20	; 32
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	ea e0       	ldi	r30, 0x0A	; 10
     40e:	f2 e0       	ldi	r31, 0x02	; 2
     410:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__prologue_saves__+0x18>
     414:	69 83       	std	Y+1, r22	; 0x01
     416:	7a 83       	std	Y+2, r23	; 0x02
     418:	8b 83       	std	Y+3, r24	; 0x03
     41a:	9c 83       	std	Y+4, r25	; 0x04
     41c:	2d 83       	std	Y+5, r18	; 0x05
     41e:	3e 83       	std	Y+6, r19	; 0x06
     420:	4f 83       	std	Y+7, r20	; 0x07
     422:	58 87       	std	Y+8, r21	; 0x08
     424:	e9 e0       	ldi	r30, 0x09	; 9
     426:	ee 2e       	mov	r14, r30
     428:	f1 2c       	mov	r15, r1
     42a:	ec 0e       	add	r14, r28
     42c:	fd 1e       	adc	r15, r29
     42e:	ce 01       	movw	r24, r28
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	b7 01       	movw	r22, r14
     434:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     438:	8e 01       	movw	r16, r28
     43a:	0f 5e       	subi	r16, 0xEF	; 239
     43c:	1f 4f       	sbci	r17, 0xFF	; 255
     43e:	ce 01       	movw	r24, r28
     440:	05 96       	adiw	r24, 0x05	; 5
     442:	b8 01       	movw	r22, r16
     444:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     448:	8a 89       	ldd	r24, Y+18	; 0x12
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	89 27       	eor	r24, r25
     44e:	8a 8b       	std	Y+18, r24	; 0x12
     450:	c7 01       	movw	r24, r14
     452:	b8 01       	movw	r22, r16
     454:	ae 01       	movw	r20, r28
     456:	47 5e       	subi	r20, 0xE7	; 231
     458:	5f 4f       	sbci	r21, 0xFF	; 255
     45a:	0e 94 b8 00 	call	0x170	; 0x170 <_fpadd_parts>
     45e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__pack_f>
     462:	a0 96       	adiw	r28, 0x20	; 32
     464:	e6 e0       	ldi	r30, 0x06	; 6
     466:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__epilogue_restores__+0x18>

0000046a <__addsf3>:
     46a:	a0 e2       	ldi	r26, 0x20	; 32
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	eb e3       	ldi	r30, 0x3B	; 59
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__prologue_saves__+0x18>
     476:	69 83       	std	Y+1, r22	; 0x01
     478:	7a 83       	std	Y+2, r23	; 0x02
     47a:	8b 83       	std	Y+3, r24	; 0x03
     47c:	9c 83       	std	Y+4, r25	; 0x04
     47e:	2d 83       	std	Y+5, r18	; 0x05
     480:	3e 83       	std	Y+6, r19	; 0x06
     482:	4f 83       	std	Y+7, r20	; 0x07
     484:	58 87       	std	Y+8, r21	; 0x08
     486:	f9 e0       	ldi	r31, 0x09	; 9
     488:	ef 2e       	mov	r14, r31
     48a:	f1 2c       	mov	r15, r1
     48c:	ec 0e       	add	r14, r28
     48e:	fd 1e       	adc	r15, r29
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	b7 01       	movw	r22, r14
     496:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     49a:	8e 01       	movw	r16, r28
     49c:	0f 5e       	subi	r16, 0xEF	; 239
     49e:	1f 4f       	sbci	r17, 0xFF	; 255
     4a0:	ce 01       	movw	r24, r28
     4a2:	05 96       	adiw	r24, 0x05	; 5
     4a4:	b8 01       	movw	r22, r16
     4a6:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     4aa:	c7 01       	movw	r24, r14
     4ac:	b8 01       	movw	r22, r16
     4ae:	ae 01       	movw	r20, r28
     4b0:	47 5e       	subi	r20, 0xE7	; 231
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	0e 94 b8 00 	call	0x170	; 0x170 <_fpadd_parts>
     4b8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__pack_f>
     4bc:	a0 96       	adiw	r28, 0x20	; 32
     4be:	e6 e0       	ldi	r30, 0x06	; 6
     4c0:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__epilogue_restores__+0x18>

000004c4 <__mulsf3>:
     4c4:	a0 e2       	ldi	r26, 0x20	; 32
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e6       	ldi	r30, 0x68	; 104
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
     4cc:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__prologue_saves__>
     4d0:	69 83       	std	Y+1, r22	; 0x01
     4d2:	7a 83       	std	Y+2, r23	; 0x02
     4d4:	8b 83       	std	Y+3, r24	; 0x03
     4d6:	9c 83       	std	Y+4, r25	; 0x04
     4d8:	2d 83       	std	Y+5, r18	; 0x05
     4da:	3e 83       	std	Y+6, r19	; 0x06
     4dc:	4f 83       	std	Y+7, r20	; 0x07
     4de:	58 87       	std	Y+8, r21	; 0x08
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	be 01       	movw	r22, r28
     4e6:	67 5f       	subi	r22, 0xF7	; 247
     4e8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ea:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     4ee:	ce 01       	movw	r24, r28
     4f0:	05 96       	adiw	r24, 0x05	; 5
     4f2:	be 01       	movw	r22, r28
     4f4:	6f 5e       	subi	r22, 0xEF	; 239
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     4fc:	99 85       	ldd	r25, Y+9	; 0x09
     4fe:	92 30       	cpi	r25, 0x02	; 2
     500:	88 f0       	brcs	.+34     	; 0x524 <__mulsf3+0x60>
     502:	89 89       	ldd	r24, Y+17	; 0x11
     504:	82 30       	cpi	r24, 0x02	; 2
     506:	c8 f0       	brcs	.+50     	; 0x53a <__mulsf3+0x76>
     508:	94 30       	cpi	r25, 0x04	; 4
     50a:	19 f4       	brne	.+6      	; 0x512 <__mulsf3+0x4e>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	51 f4       	brne	.+20     	; 0x524 <__mulsf3+0x60>
     510:	04 c0       	rjmp	.+8      	; 0x51a <__mulsf3+0x56>
     512:	84 30       	cpi	r24, 0x04	; 4
     514:	29 f4       	brne	.+10     	; 0x520 <__mulsf3+0x5c>
     516:	92 30       	cpi	r25, 0x02	; 2
     518:	81 f4       	brne	.+32     	; 0x53a <__mulsf3+0x76>
     51a:	88 e3       	ldi	r24, 0x38	; 56
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	c6 c0       	rjmp	.+396    	; 0x6ac <__mulsf3+0x1e8>
     520:	92 30       	cpi	r25, 0x02	; 2
     522:	49 f4       	brne	.+18     	; 0x536 <__mulsf3+0x72>
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	9a 85       	ldd	r25, Y+10	; 0x0a
     528:	8a 89       	ldd	r24, Y+18	; 0x12
     52a:	98 13       	cpse	r25, r24
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	2a 87       	std	Y+10, r18	; 0x0a
     530:	ce 01       	movw	r24, r28
     532:	09 96       	adiw	r24, 0x09	; 9
     534:	bb c0       	rjmp	.+374    	; 0x6ac <__mulsf3+0x1e8>
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	49 f4       	brne	.+18     	; 0x54c <__mulsf3+0x88>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	9a 85       	ldd	r25, Y+10	; 0x0a
     53e:	8a 89       	ldd	r24, Y+18	; 0x12
     540:	98 13       	cpse	r25, r24
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	2a 8b       	std	Y+18, r18	; 0x12
     546:	ce 01       	movw	r24, r28
     548:	41 96       	adiw	r24, 0x11	; 17
     54a:	b0 c0       	rjmp	.+352    	; 0x6ac <__mulsf3+0x1e8>
     54c:	2d 84       	ldd	r2, Y+13	; 0x0d
     54e:	3e 84       	ldd	r3, Y+14	; 0x0e
     550:	4f 84       	ldd	r4, Y+15	; 0x0f
     552:	58 88       	ldd	r5, Y+16	; 0x10
     554:	6d 88       	ldd	r6, Y+21	; 0x15
     556:	7e 88       	ldd	r7, Y+22	; 0x16
     558:	8f 88       	ldd	r8, Y+23	; 0x17
     55a:	98 8c       	ldd	r9, Y+24	; 0x18
     55c:	ee 24       	eor	r14, r14
     55e:	ff 24       	eor	r15, r15
     560:	87 01       	movw	r16, r14
     562:	aa 24       	eor	r10, r10
     564:	bb 24       	eor	r11, r11
     566:	65 01       	movw	r12, r10
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	e0 e0       	ldi	r30, 0x00	; 0
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	c1 01       	movw	r24, r2
     576:	81 70       	andi	r24, 0x01	; 1
     578:	90 70       	andi	r25, 0x00	; 0
     57a:	89 2b       	or	r24, r25
     57c:	e9 f0       	breq	.+58     	; 0x5b8 <__mulsf3+0xf4>
     57e:	e6 0c       	add	r14, r6
     580:	f7 1c       	adc	r15, r7
     582:	08 1d       	adc	r16, r8
     584:	19 1d       	adc	r17, r9
     586:	9a 01       	movw	r18, r20
     588:	ab 01       	movw	r20, r22
     58a:	2a 0d       	add	r18, r10
     58c:	3b 1d       	adc	r19, r11
     58e:	4c 1d       	adc	r20, r12
     590:	5d 1d       	adc	r21, r13
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e6 14       	cp	r14, r6
     59c:	f7 04       	cpc	r15, r7
     59e:	08 05       	cpc	r16, r8
     5a0:	19 05       	cpc	r17, r9
     5a2:	20 f4       	brcc	.+8      	; 0x5ac <__mulsf3+0xe8>
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	ba 01       	movw	r22, r20
     5ae:	a9 01       	movw	r20, r18
     5b0:	48 0f       	add	r20, r24
     5b2:	59 1f       	adc	r21, r25
     5b4:	6a 1f       	adc	r22, r26
     5b6:	7b 1f       	adc	r23, r27
     5b8:	aa 0c       	add	r10, r10
     5ba:	bb 1c       	adc	r11, r11
     5bc:	cc 1c       	adc	r12, r12
     5be:	dd 1c       	adc	r13, r13
     5c0:	97 fe       	sbrs	r9, 7
     5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <__mulsf3+0x110>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	a8 2a       	or	r10, r24
     5ce:	b9 2a       	or	r11, r25
     5d0:	ca 2a       	or	r12, r26
     5d2:	db 2a       	or	r13, r27
     5d4:	31 96       	adiw	r30, 0x01	; 1
     5d6:	e0 32       	cpi	r30, 0x20	; 32
     5d8:	f1 05       	cpc	r31, r1
     5da:	49 f0       	breq	.+18     	; 0x5ee <__mulsf3+0x12a>
     5dc:	66 0c       	add	r6, r6
     5de:	77 1c       	adc	r7, r7
     5e0:	88 1c       	adc	r8, r8
     5e2:	99 1c       	adc	r9, r9
     5e4:	56 94       	lsr	r5
     5e6:	47 94       	ror	r4
     5e8:	37 94       	ror	r3
     5ea:	27 94       	ror	r2
     5ec:	c3 cf       	rjmp	.-122    	; 0x574 <__mulsf3+0xb0>
     5ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     5f0:	ea 89       	ldd	r30, Y+18	; 0x12
     5f2:	2b 89       	ldd	r18, Y+19	; 0x13
     5f4:	3c 89       	ldd	r19, Y+20	; 0x14
     5f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5fa:	28 0f       	add	r18, r24
     5fc:	39 1f       	adc	r19, r25
     5fe:	2e 5f       	subi	r18, 0xFE	; 254
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	17 c0       	rjmp	.+46     	; 0x632 <__mulsf3+0x16e>
     604:	ca 01       	movw	r24, r20
     606:	81 70       	andi	r24, 0x01	; 1
     608:	90 70       	andi	r25, 0x00	; 0
     60a:	89 2b       	or	r24, r25
     60c:	61 f0       	breq	.+24     	; 0x626 <__mulsf3+0x162>
     60e:	16 95       	lsr	r17
     610:	07 95       	ror	r16
     612:	f7 94       	ror	r15
     614:	e7 94       	ror	r14
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e8       	ldi	r27, 0x80	; 128
     61e:	e8 2a       	or	r14, r24
     620:	f9 2a       	or	r15, r25
     622:	0a 2b       	or	r16, r26
     624:	1b 2b       	or	r17, r27
     626:	76 95       	lsr	r23
     628:	67 95       	ror	r22
     62a:	57 95       	ror	r21
     62c:	47 95       	ror	r20
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	77 fd       	sbrc	r23, 7
     634:	e7 cf       	rjmp	.-50     	; 0x604 <__mulsf3+0x140>
     636:	0c c0       	rjmp	.+24     	; 0x650 <__mulsf3+0x18c>
     638:	44 0f       	add	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	66 1f       	adc	r22, r22
     63e:	77 1f       	adc	r23, r23
     640:	17 fd       	sbrc	r17, 7
     642:	41 60       	ori	r20, 0x01	; 1
     644:	ee 0c       	add	r14, r14
     646:	ff 1c       	adc	r15, r15
     648:	00 1f       	adc	r16, r16
     64a:	11 1f       	adc	r17, r17
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	30 40       	sbci	r19, 0x00	; 0
     650:	40 30       	cpi	r20, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	59 07       	cpc	r21, r25
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	69 07       	cpc	r22, r25
     65a:	90 e4       	ldi	r25, 0x40	; 64
     65c:	79 07       	cpc	r23, r25
     65e:	60 f3       	brcs	.-40     	; 0x638 <__mulsf3+0x174>
     660:	2b 8f       	std	Y+27, r18	; 0x1b
     662:	3c 8f       	std	Y+28, r19	; 0x1c
     664:	db 01       	movw	r26, r22
     666:	ca 01       	movw	r24, r20
     668:	8f 77       	andi	r24, 0x7F	; 127
     66a:	90 70       	andi	r25, 0x00	; 0
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	80 34       	cpi	r24, 0x40	; 64
     672:	91 05       	cpc	r25, r1
     674:	a1 05       	cpc	r26, r1
     676:	b1 05       	cpc	r27, r1
     678:	61 f4       	brne	.+24     	; 0x692 <__mulsf3+0x1ce>
     67a:	47 fd       	sbrc	r20, 7
     67c:	0a c0       	rjmp	.+20     	; 0x692 <__mulsf3+0x1ce>
     67e:	e1 14       	cp	r14, r1
     680:	f1 04       	cpc	r15, r1
     682:	01 05       	cpc	r16, r1
     684:	11 05       	cpc	r17, r1
     686:	29 f0       	breq	.+10     	; 0x692 <__mulsf3+0x1ce>
     688:	40 5c       	subi	r20, 0xC0	; 192
     68a:	5f 4f       	sbci	r21, 0xFF	; 255
     68c:	6f 4f       	sbci	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	40 78       	andi	r20, 0x80	; 128
     692:	1a 8e       	std	Y+26, r1	; 0x1a
     694:	fe 17       	cp	r31, r30
     696:	11 f0       	breq	.+4      	; 0x69c <__mulsf3+0x1d8>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	8a 8f       	std	Y+26, r24	; 0x1a
     69c:	4d 8f       	std	Y+29, r20	; 0x1d
     69e:	5e 8f       	std	Y+30, r21	; 0x1e
     6a0:	6f 8f       	std	Y+31, r22	; 0x1f
     6a2:	78 a3       	std	Y+32, r23	; 0x20
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	89 8f       	std	Y+25, r24	; 0x19
     6a8:	ce 01       	movw	r24, r28
     6aa:	49 96       	adiw	r24, 0x19	; 25
     6ac:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__pack_f>
     6b0:	a0 96       	adiw	r28, 0x20	; 32
     6b2:	e2 e1       	ldi	r30, 0x12	; 18
     6b4:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__epilogue_restores__>

000006b8 <__divsf3>:
     6b8:	a8 e1       	ldi	r26, 0x18	; 24
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	e2 e6       	ldi	r30, 0x62	; 98
     6be:	f3 e0       	ldi	r31, 0x03	; 3
     6c0:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__+0x10>
     6c4:	69 83       	std	Y+1, r22	; 0x01
     6c6:	7a 83       	std	Y+2, r23	; 0x02
     6c8:	8b 83       	std	Y+3, r24	; 0x03
     6ca:	9c 83       	std	Y+4, r25	; 0x04
     6cc:	2d 83       	std	Y+5, r18	; 0x05
     6ce:	3e 83       	std	Y+6, r19	; 0x06
     6d0:	4f 83       	std	Y+7, r20	; 0x07
     6d2:	58 87       	std	Y+8, r21	; 0x08
     6d4:	b9 e0       	ldi	r27, 0x09	; 9
     6d6:	eb 2e       	mov	r14, r27
     6d8:	f1 2c       	mov	r15, r1
     6da:	ec 0e       	add	r14, r28
     6dc:	fd 1e       	adc	r15, r29
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	b7 01       	movw	r22, r14
     6e4:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     6e8:	8e 01       	movw	r16, r28
     6ea:	0f 5e       	subi	r16, 0xEF	; 239
     6ec:	1f 4f       	sbci	r17, 0xFF	; 255
     6ee:	ce 01       	movw	r24, r28
     6f0:	05 96       	adiw	r24, 0x05	; 5
     6f2:	b8 01       	movw	r22, r16
     6f4:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     6f8:	29 85       	ldd	r18, Y+9	; 0x09
     6fa:	22 30       	cpi	r18, 0x02	; 2
     6fc:	08 f4       	brcc	.+2      	; 0x700 <__divsf3+0x48>
     6fe:	7e c0       	rjmp	.+252    	; 0x7fc <__divsf3+0x144>
     700:	39 89       	ldd	r19, Y+17	; 0x11
     702:	32 30       	cpi	r19, 0x02	; 2
     704:	10 f4       	brcc	.+4      	; 0x70a <__divsf3+0x52>
     706:	b8 01       	movw	r22, r16
     708:	7c c0       	rjmp	.+248    	; 0x802 <__divsf3+0x14a>
     70a:	8a 85       	ldd	r24, Y+10	; 0x0a
     70c:	9a 89       	ldd	r25, Y+18	; 0x12
     70e:	89 27       	eor	r24, r25
     710:	8a 87       	std	Y+10, r24	; 0x0a
     712:	24 30       	cpi	r18, 0x04	; 4
     714:	11 f0       	breq	.+4      	; 0x71a <__divsf3+0x62>
     716:	22 30       	cpi	r18, 0x02	; 2
     718:	31 f4       	brne	.+12     	; 0x726 <__divsf3+0x6e>
     71a:	23 17       	cp	r18, r19
     71c:	09 f0       	breq	.+2      	; 0x720 <__divsf3+0x68>
     71e:	6e c0       	rjmp	.+220    	; 0x7fc <__divsf3+0x144>
     720:	68 e3       	ldi	r22, 0x38	; 56
     722:	72 e0       	ldi	r23, 0x02	; 2
     724:	6e c0       	rjmp	.+220    	; 0x802 <__divsf3+0x14a>
     726:	34 30       	cpi	r19, 0x04	; 4
     728:	39 f4       	brne	.+14     	; 0x738 <__divsf3+0x80>
     72a:	1d 86       	std	Y+13, r1	; 0x0d
     72c:	1e 86       	std	Y+14, r1	; 0x0e
     72e:	1f 86       	std	Y+15, r1	; 0x0f
     730:	18 8a       	std	Y+16, r1	; 0x10
     732:	1c 86       	std	Y+12, r1	; 0x0c
     734:	1b 86       	std	Y+11, r1	; 0x0b
     736:	04 c0       	rjmp	.+8      	; 0x740 <__divsf3+0x88>
     738:	32 30       	cpi	r19, 0x02	; 2
     73a:	21 f4       	brne	.+8      	; 0x744 <__divsf3+0x8c>
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	89 87       	std	Y+9, r24	; 0x09
     740:	b7 01       	movw	r22, r14
     742:	5f c0       	rjmp	.+190    	; 0x802 <__divsf3+0x14a>
     744:	2b 85       	ldd	r18, Y+11	; 0x0b
     746:	3c 85       	ldd	r19, Y+12	; 0x0c
     748:	8b 89       	ldd	r24, Y+19	; 0x13
     74a:	9c 89       	ldd	r25, Y+20	; 0x14
     74c:	28 1b       	sub	r18, r24
     74e:	39 0b       	sbc	r19, r25
     750:	3c 87       	std	Y+12, r19	; 0x0c
     752:	2b 87       	std	Y+11, r18	; 0x0b
     754:	ed 84       	ldd	r14, Y+13	; 0x0d
     756:	fe 84       	ldd	r15, Y+14	; 0x0e
     758:	0f 85       	ldd	r16, Y+15	; 0x0f
     75a:	18 89       	ldd	r17, Y+16	; 0x10
     75c:	ad 88       	ldd	r10, Y+21	; 0x15
     75e:	be 88       	ldd	r11, Y+22	; 0x16
     760:	cf 88       	ldd	r12, Y+23	; 0x17
     762:	d8 8c       	ldd	r13, Y+24	; 0x18
     764:	ea 14       	cp	r14, r10
     766:	fb 04       	cpc	r15, r11
     768:	0c 05       	cpc	r16, r12
     76a:	1d 05       	cpc	r17, r13
     76c:	40 f4       	brcc	.+16     	; 0x77e <__divsf3+0xc6>
     76e:	ee 0c       	add	r14, r14
     770:	ff 1c       	adc	r15, r15
     772:	00 1f       	adc	r16, r16
     774:	11 1f       	adc	r17, r17
     776:	21 50       	subi	r18, 0x01	; 1
     778:	30 40       	sbci	r19, 0x00	; 0
     77a:	3c 87       	std	Y+12, r19	; 0x0c
     77c:	2b 87       	std	Y+11, r18	; 0x0b
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	b0 e4       	ldi	r27, 0x40	; 64
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	ea 14       	cp	r14, r10
     794:	fb 04       	cpc	r15, r11
     796:	0c 05       	cpc	r16, r12
     798:	1d 05       	cpc	r17, r13
     79a:	40 f0       	brcs	.+16     	; 0x7ac <__divsf3+0xf4>
     79c:	28 2b       	or	r18, r24
     79e:	39 2b       	or	r19, r25
     7a0:	4a 2b       	or	r20, r26
     7a2:	5b 2b       	or	r21, r27
     7a4:	ea 18       	sub	r14, r10
     7a6:	fb 08       	sbc	r15, r11
     7a8:	0c 09       	sbc	r16, r12
     7aa:	1d 09       	sbc	r17, r13
     7ac:	b6 95       	lsr	r27
     7ae:	a7 95       	ror	r26
     7b0:	97 95       	ror	r25
     7b2:	87 95       	ror	r24
     7b4:	ee 0c       	add	r14, r14
     7b6:	ff 1c       	adc	r15, r15
     7b8:	00 1f       	adc	r16, r16
     7ba:	11 1f       	adc	r17, r17
     7bc:	6f 5f       	subi	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	6f 31       	cpi	r22, 0x1F	; 31
     7c2:	71 05       	cpc	r23, r1
     7c4:	31 f7       	brne	.-52     	; 0x792 <__divsf3+0xda>
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	8f 77       	andi	r24, 0x7F	; 127
     7cc:	90 70       	andi	r25, 0x00	; 0
     7ce:	a0 70       	andi	r26, 0x00	; 0
     7d0:	b0 70       	andi	r27, 0x00	; 0
     7d2:	80 34       	cpi	r24, 0x40	; 64
     7d4:	91 05       	cpc	r25, r1
     7d6:	a1 05       	cpc	r26, r1
     7d8:	b1 05       	cpc	r27, r1
     7da:	61 f4       	brne	.+24     	; 0x7f4 <__divsf3+0x13c>
     7dc:	27 fd       	sbrc	r18, 7
     7de:	0a c0       	rjmp	.+20     	; 0x7f4 <__divsf3+0x13c>
     7e0:	e1 14       	cp	r14, r1
     7e2:	f1 04       	cpc	r15, r1
     7e4:	01 05       	cpc	r16, r1
     7e6:	11 05       	cpc	r17, r1
     7e8:	29 f0       	breq	.+10     	; 0x7f4 <__divsf3+0x13c>
     7ea:	20 5c       	subi	r18, 0xC0	; 192
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
     7ee:	4f 4f       	sbci	r20, 0xFF	; 255
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	20 78       	andi	r18, 0x80	; 128
     7f4:	2d 87       	std	Y+13, r18	; 0x0d
     7f6:	3e 87       	std	Y+14, r19	; 0x0e
     7f8:	4f 87       	std	Y+15, r20	; 0x0f
     7fa:	58 8b       	std	Y+16, r21	; 0x10
     7fc:	be 01       	movw	r22, r28
     7fe:	67 5f       	subi	r22, 0xF7	; 247
     800:	7f 4f       	sbci	r23, 0xFF	; 255
     802:	cb 01       	movw	r24, r22
     804:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__pack_f>
     808:	68 96       	adiw	r28, 0x18	; 24
     80a:	ea e0       	ldi	r30, 0x0A	; 10
     80c:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__+0x10>

00000810 <__gesf2>:
     810:	a8 e1       	ldi	r26, 0x18	; 24
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	ee e0       	ldi	r30, 0x0E	; 14
     816:	f4 e0       	ldi	r31, 0x04	; 4
     818:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__prologue_saves__+0x18>
     81c:	69 83       	std	Y+1, r22	; 0x01
     81e:	7a 83       	std	Y+2, r23	; 0x02
     820:	8b 83       	std	Y+3, r24	; 0x03
     822:	9c 83       	std	Y+4, r25	; 0x04
     824:	2d 83       	std	Y+5, r18	; 0x05
     826:	3e 83       	std	Y+6, r19	; 0x06
     828:	4f 83       	std	Y+7, r20	; 0x07
     82a:	58 87       	std	Y+8, r21	; 0x08
     82c:	89 e0       	ldi	r24, 0x09	; 9
     82e:	e8 2e       	mov	r14, r24
     830:	f1 2c       	mov	r15, r1
     832:	ec 0e       	add	r14, r28
     834:	fd 1e       	adc	r15, r29
     836:	ce 01       	movw	r24, r28
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	b7 01       	movw	r22, r14
     83c:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     840:	8e 01       	movw	r16, r28
     842:	0f 5e       	subi	r16, 0xEF	; 239
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	ce 01       	movw	r24, r28
     848:	05 96       	adiw	r24, 0x05	; 5
     84a:	b8 01       	movw	r22, r16
     84c:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     850:	89 85       	ldd	r24, Y+9	; 0x09
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	40 f0       	brcs	.+16     	; 0x866 <__gesf2+0x56>
     856:	89 89       	ldd	r24, Y+17	; 0x11
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	28 f0       	brcs	.+10     	; 0x866 <__gesf2+0x56>
     85c:	c7 01       	movw	r24, r14
     85e:	b8 01       	movw	r22, r16
     860:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fpcmp_parts_f>
     864:	01 c0       	rjmp	.+2      	; 0x868 <__gesf2+0x58>
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	68 96       	adiw	r28, 0x18	; 24
     86a:	e6 e0       	ldi	r30, 0x06	; 6
     86c:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__epilogue_restores__+0x18>

00000870 <__fixsfsi>:
     870:	ac e0       	ldi	r26, 0x0C	; 12
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	ee e3       	ldi	r30, 0x3E	; 62
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__prologue_saves__+0x20>
     87c:	69 83       	std	Y+1, r22	; 0x01
     87e:	7a 83       	std	Y+2, r23	; 0x02
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	be 01       	movw	r22, r28
     88a:	6b 5f       	subi	r22, 0xFB	; 251
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	0e 94 29 06 	call	0xc52	; 0xc52 <__unpack_f>
     892:	8d 81       	ldd	r24, Y+5	; 0x05
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	61 f1       	breq	.+88     	; 0x8f0 <__fixsfsi+0x80>
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	50 f1       	brcs	.+84     	; 0x8f0 <__fixsfsi+0x80>
     89c:	84 30       	cpi	r24, 0x04	; 4
     89e:	21 f4       	brne	.+8      	; 0x8a8 <__fixsfsi+0x38>
     8a0:	8e 81       	ldd	r24, Y+6	; 0x06
     8a2:	88 23       	and	r24, r24
     8a4:	51 f1       	breq	.+84     	; 0x8fa <__fixsfsi+0x8a>
     8a6:	2e c0       	rjmp	.+92     	; 0x904 <__stack+0x5>
     8a8:	2f 81       	ldd	r18, Y+7	; 0x07
     8aa:	38 85       	ldd	r19, Y+8	; 0x08
     8ac:	37 fd       	sbrc	r19, 7
     8ae:	20 c0       	rjmp	.+64     	; 0x8f0 <__fixsfsi+0x80>
     8b0:	6e 81       	ldd	r22, Y+6	; 0x06
     8b2:	2f 31       	cpi	r18, 0x1F	; 31
     8b4:	31 05       	cpc	r19, r1
     8b6:	1c f0       	brlt	.+6      	; 0x8be <__fixsfsi+0x4e>
     8b8:	66 23       	and	r22, r22
     8ba:	f9 f0       	breq	.+62     	; 0x8fa <__fixsfsi+0x8a>
     8bc:	23 c0       	rjmp	.+70     	; 0x904 <__stack+0x5>
     8be:	8e e1       	ldi	r24, 0x1E	; 30
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	82 1b       	sub	r24, r18
     8c4:	93 0b       	sbc	r25, r19
     8c6:	29 85       	ldd	r18, Y+9	; 0x09
     8c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     8ca:	4b 85       	ldd	r20, Y+11	; 0x0b
     8cc:	5c 85       	ldd	r21, Y+12	; 0x0c
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <__fixsfsi+0x68>
     8d0:	56 95       	lsr	r21
     8d2:	47 95       	ror	r20
     8d4:	37 95       	ror	r19
     8d6:	27 95       	ror	r18
     8d8:	8a 95       	dec	r24
     8da:	d2 f7       	brpl	.-12     	; 0x8d0 <__fixsfsi+0x60>
     8dc:	66 23       	and	r22, r22
     8de:	b1 f0       	breq	.+44     	; 0x90c <__stack+0xd>
     8e0:	50 95       	com	r21
     8e2:	40 95       	com	r20
     8e4:	30 95       	com	r19
     8e6:	21 95       	neg	r18
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	4f 4f       	sbci	r20, 0xFF	; 255
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
     8ee:	0e c0       	rjmp	.+28     	; 0x90c <__stack+0xd>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>
     8fa:	2f ef       	ldi	r18, 0xFF	; 255
     8fc:	3f ef       	ldi	r19, 0xFF	; 255
     8fe:	4f ef       	ldi	r20, 0xFF	; 255
     900:	5f e7       	ldi	r21, 0x7F	; 127
     902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xd>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e8       	ldi	r21, 0x80	; 128
     90c:	b9 01       	movw	r22, r18
     90e:	ca 01       	movw	r24, r20
     910:	2c 96       	adiw	r28, 0x0c	; 12
     912:	e2 e0       	ldi	r30, 0x02	; 2
     914:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__epilogue_restores__+0x20>

00000918 <__floatunsisf>:
     918:	a8 e0       	ldi	r26, 0x08	; 8
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	e2 e9       	ldi	r30, 0x92	; 146
     91e:	f4 e0       	ldi	r31, 0x04	; 4
     920:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__+0x10>
     924:	7b 01       	movw	r14, r22
     926:	8c 01       	movw	r16, r24
     928:	61 15       	cp	r22, r1
     92a:	71 05       	cpc	r23, r1
     92c:	81 05       	cpc	r24, r1
     92e:	91 05       	cpc	r25, r1
     930:	19 f4       	brne	.+6      	; 0x938 <__floatunsisf+0x20>
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	89 83       	std	Y+1, r24	; 0x01
     936:	60 c0       	rjmp	.+192    	; 0x9f8 <__floatunsisf+0xe0>
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	8e e1       	ldi	r24, 0x1E	; 30
     93e:	c8 2e       	mov	r12, r24
     940:	d1 2c       	mov	r13, r1
     942:	dc 82       	std	Y+4, r13	; 0x04
     944:	cb 82       	std	Y+3, r12	; 0x03
     946:	ed 82       	std	Y+5, r14	; 0x05
     948:	fe 82       	std	Y+6, r15	; 0x06
     94a:	0f 83       	std	Y+7, r16	; 0x07
     94c:	18 87       	std	Y+8, r17	; 0x08
     94e:	c8 01       	movw	r24, r16
     950:	b7 01       	movw	r22, r14
     952:	0e 94 05 05 	call	0xa0a	; 0xa0a <__clzsi2>
     956:	fc 01       	movw	r30, r24
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	f7 ff       	sbrs	r31, 7
     95c:	3b c0       	rjmp	.+118    	; 0x9d4 <__floatunsisf+0xbc>
     95e:	22 27       	eor	r18, r18
     960:	33 27       	eor	r19, r19
     962:	2e 1b       	sub	r18, r30
     964:	3f 0b       	sbc	r19, r31
     966:	57 01       	movw	r10, r14
     968:	68 01       	movw	r12, r16
     96a:	02 2e       	mov	r0, r18
     96c:	04 c0       	rjmp	.+8      	; 0x976 <__floatunsisf+0x5e>
     96e:	d6 94       	lsr	r13
     970:	c7 94       	ror	r12
     972:	b7 94       	ror	r11
     974:	a7 94       	ror	r10
     976:	0a 94       	dec	r0
     978:	d2 f7       	brpl	.-12     	; 0x96e <__floatunsisf+0x56>
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__floatunsisf+0x7c>
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	aa 1f       	adc	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	2a 95       	dec	r18
     996:	d2 f7       	brpl	.-12     	; 0x98c <__floatunsisf+0x74>
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	a1 09       	sbc	r26, r1
     99c:	b1 09       	sbc	r27, r1
     99e:	8e 21       	and	r24, r14
     9a0:	9f 21       	and	r25, r15
     9a2:	a0 23       	and	r26, r16
     9a4:	b1 23       	and	r27, r17
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	a1 05       	cpc	r26, r1
     9aa:	b1 05       	cpc	r27, r1
     9ac:	21 f0       	breq	.+8      	; 0x9b6 <__floatunsisf+0x9e>
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	4a 29       	or	r20, r10
     9b8:	5b 29       	or	r21, r11
     9ba:	6c 29       	or	r22, r12
     9bc:	7d 29       	or	r23, r13
     9be:	4d 83       	std	Y+5, r20	; 0x05
     9c0:	5e 83       	std	Y+6, r21	; 0x06
     9c2:	6f 83       	std	Y+7, r22	; 0x07
     9c4:	78 87       	std	Y+8, r23	; 0x08
     9c6:	8e e1       	ldi	r24, 0x1E	; 30
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	8e 1b       	sub	r24, r30
     9cc:	9f 0b       	sbc	r25, r31
     9ce:	9c 83       	std	Y+4, r25	; 0x04
     9d0:	8b 83       	std	Y+3, r24	; 0x03
     9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <__floatunsisf+0xe0>
     9d4:	30 97       	sbiw	r30, 0x00	; 0
     9d6:	81 f0       	breq	.+32     	; 0x9f8 <__floatunsisf+0xe0>
     9d8:	0e 2e       	mov	r0, r30
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <__floatunsisf+0xcc>
     9dc:	ee 0c       	add	r14, r14
     9de:	ff 1c       	adc	r15, r15
     9e0:	00 1f       	adc	r16, r16
     9e2:	11 1f       	adc	r17, r17
     9e4:	0a 94       	dec	r0
     9e6:	d2 f7       	brpl	.-12     	; 0x9dc <__floatunsisf+0xc4>
     9e8:	ed 82       	std	Y+5, r14	; 0x05
     9ea:	fe 82       	std	Y+6, r15	; 0x06
     9ec:	0f 83       	std	Y+7, r16	; 0x07
     9ee:	18 87       	std	Y+8, r17	; 0x08
     9f0:	ce 1a       	sub	r12, r30
     9f2:	df 0a       	sbc	r13, r31
     9f4:	dc 82       	std	Y+4, r13	; 0x04
     9f6:	cb 82       	std	Y+3, r12	; 0x03
     9f8:	1a 82       	std	Y+2, r1	; 0x02
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__pack_f>
     a02:	28 96       	adiw	r28, 0x08	; 8
     a04:	ea e0       	ldi	r30, 0x0A	; 10
     a06:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__+0x10>

00000a0a <__clzsi2>:
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	7b 01       	movw	r14, r22
     a14:	8c 01       	movw	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	e8 16       	cp	r14, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	f8 06       	cpc	r15, r24
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	08 07       	cpc	r16, r24
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	18 07       	cpc	r17, r24
     a26:	88 f4       	brcc	.+34     	; 0xa4a <__clzsi2+0x40>
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	e8 16       	cp	r14, r24
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	31 f0       	breq	.+12     	; 0xa40 <__clzsi2+0x36>
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x36>
     a36:	88 e0       	ldi	r24, 0x08	; 8
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	17 c0       	rjmp	.+46     	; 0xa6e <__clzsi2+0x64>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <__clzsi2+0x64>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	e8 16       	cp	r14, r24
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	f8 06       	cpc	r15, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	08 07       	cpc	r16, r24
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	18 07       	cpc	r17, r24
     a5a:	28 f0       	brcs	.+10     	; 0xa66 <__clzsi2+0x5c>
     a5c:	88 e1       	ldi	r24, 0x18	; 24
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	a0 e0       	ldi	r26, 0x00	; 0
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <__clzsi2+0x64>
     a66:	80 e1       	ldi	r24, 0x10	; 16
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	20 e2       	ldi	r18, 0x20	; 32
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	28 1b       	sub	r18, r24
     a78:	39 0b       	sbc	r19, r25
     a7a:	4a 0b       	sbc	r20, r26
     a7c:	5b 0b       	sbc	r21, r27
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__clzsi2+0x7e>
     a80:	16 95       	lsr	r17
     a82:	07 95       	ror	r16
     a84:	f7 94       	ror	r15
     a86:	e7 94       	ror	r14
     a88:	8a 95       	dec	r24
     a8a:	d2 f7       	brpl	.-12     	; 0xa80 <__clzsi2+0x76>
     a8c:	f7 01       	movw	r30, r14
     a8e:	e0 5c       	subi	r30, 0xC0	; 192
     a90:	fd 4f       	sbci	r31, 0xFD	; 253
     a92:	80 81       	ld	r24, Z
     a94:	28 1b       	sub	r18, r24
     a96:	31 09       	sbc	r19, r1
     a98:	41 09       	sbc	r20, r1
     a9a:	51 09       	sbc	r21, r1
     a9c:	c9 01       	movw	r24, r18
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	08 95       	ret

00000aa8 <__pack_f>:
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	fc 01       	movw	r30, r24
     ab4:	e4 80       	ldd	r14, Z+4	; 0x04
     ab6:	f5 80       	ldd	r15, Z+5	; 0x05
     ab8:	06 81       	ldd	r16, Z+6	; 0x06
     aba:	17 81       	ldd	r17, Z+7	; 0x07
     abc:	d1 80       	ldd	r13, Z+1	; 0x01
     abe:	80 81       	ld	r24, Z
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	48 f4       	brcc	.+18     	; 0xad6 <__pack_f+0x2e>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e1       	ldi	r26, 0x10	; 16
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	e8 2a       	or	r14, r24
     ace:	f9 2a       	or	r15, r25
     ad0:	0a 2b       	or	r16, r26
     ad2:	1b 2b       	or	r17, r27
     ad4:	a5 c0       	rjmp	.+330    	; 0xc20 <__pack_f+0x178>
     ad6:	84 30       	cpi	r24, 0x04	; 4
     ad8:	09 f4       	brne	.+2      	; 0xadc <__pack_f+0x34>
     ada:	9f c0       	rjmp	.+318    	; 0xc1a <__pack_f+0x172>
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	21 f4       	brne	.+8      	; 0xae8 <__pack_f+0x40>
     ae0:	ee 24       	eor	r14, r14
     ae2:	ff 24       	eor	r15, r15
     ae4:	87 01       	movw	r16, r14
     ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <__pack_f+0x4a>
     ae8:	e1 14       	cp	r14, r1
     aea:	f1 04       	cpc	r15, r1
     aec:	01 05       	cpc	r16, r1
     aee:	11 05       	cpc	r17, r1
     af0:	19 f4       	brne	.+6      	; 0xaf8 <__pack_f+0x50>
     af2:	e0 e0       	ldi	r30, 0x00	; 0
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	96 c0       	rjmp	.+300    	; 0xc24 <__pack_f+0x17c>
     af8:	62 81       	ldd	r22, Z+2	; 0x02
     afa:	73 81       	ldd	r23, Z+3	; 0x03
     afc:	9f ef       	ldi	r25, 0xFF	; 255
     afe:	62 38       	cpi	r22, 0x82	; 130
     b00:	79 07       	cpc	r23, r25
     b02:	0c f0       	brlt	.+2      	; 0xb06 <__pack_f+0x5e>
     b04:	5b c0       	rjmp	.+182    	; 0xbbc <__pack_f+0x114>
     b06:	22 e8       	ldi	r18, 0x82	; 130
     b08:	3f ef       	ldi	r19, 0xFF	; 255
     b0a:	26 1b       	sub	r18, r22
     b0c:	37 0b       	sbc	r19, r23
     b0e:	2a 31       	cpi	r18, 0x1A	; 26
     b10:	31 05       	cpc	r19, r1
     b12:	2c f0       	brlt	.+10     	; 0xb1e <__pack_f+0x76>
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	2a c0       	rjmp	.+84     	; 0xb72 <__pack_f+0xca>
     b1e:	b8 01       	movw	r22, r16
     b20:	a7 01       	movw	r20, r14
     b22:	02 2e       	mov	r0, r18
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <__pack_f+0x86>
     b26:	76 95       	lsr	r23
     b28:	67 95       	ror	r22
     b2a:	57 95       	ror	r21
     b2c:	47 95       	ror	r20
     b2e:	0a 94       	dec	r0
     b30:	d2 f7       	brpl	.-12     	; 0xb26 <__pack_f+0x7e>
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	04 c0       	rjmp	.+8      	; 0xb44 <__pack_f+0x9c>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	aa 1f       	adc	r26, r26
     b42:	bb 1f       	adc	r27, r27
     b44:	2a 95       	dec	r18
     b46:	d2 f7       	brpl	.-12     	; 0xb3c <__pack_f+0x94>
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	a1 09       	sbc	r26, r1
     b4c:	b1 09       	sbc	r27, r1
     b4e:	8e 21       	and	r24, r14
     b50:	9f 21       	and	r25, r15
     b52:	a0 23       	and	r26, r16
     b54:	b1 23       	and	r27, r17
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	a1 05       	cpc	r26, r1
     b5a:	b1 05       	cpc	r27, r1
     b5c:	21 f0       	breq	.+8      	; 0xb66 <__pack_f+0xbe>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e0       	ldi	r26, 0x00	; 0
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	9a 01       	movw	r18, r20
     b68:	ab 01       	movw	r20, r22
     b6a:	28 2b       	or	r18, r24
     b6c:	39 2b       	or	r19, r25
     b6e:	4a 2b       	or	r20, r26
     b70:	5b 2b       	or	r21, r27
     b72:	da 01       	movw	r26, r20
     b74:	c9 01       	movw	r24, r18
     b76:	8f 77       	andi	r24, 0x7F	; 127
     b78:	90 70       	andi	r25, 0x00	; 0
     b7a:	a0 70       	andi	r26, 0x00	; 0
     b7c:	b0 70       	andi	r27, 0x00	; 0
     b7e:	80 34       	cpi	r24, 0x40	; 64
     b80:	91 05       	cpc	r25, r1
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	39 f4       	brne	.+14     	; 0xb96 <__pack_f+0xee>
     b88:	27 ff       	sbrs	r18, 7
     b8a:	09 c0       	rjmp	.+18     	; 0xb9e <__pack_f+0xf6>
     b8c:	20 5c       	subi	r18, 0xC0	; 192
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	4f 4f       	sbci	r20, 0xFF	; 255
     b92:	5f 4f       	sbci	r21, 0xFF	; 255
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <__pack_f+0xf6>
     b96:	21 5c       	subi	r18, 0xC1	; 193
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	4f 4f       	sbci	r20, 0xFF	; 255
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	e0 e0       	ldi	r30, 0x00	; 0
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	20 30       	cpi	r18, 0x00	; 0
     ba4:	a0 e0       	ldi	r26, 0x00	; 0
     ba6:	3a 07       	cpc	r19, r26
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	4a 07       	cpc	r20, r26
     bac:	a0 e4       	ldi	r26, 0x40	; 64
     bae:	5a 07       	cpc	r21, r26
     bb0:	10 f0       	brcs	.+4      	; 0xbb6 <__pack_f+0x10e>
     bb2:	e1 e0       	ldi	r30, 0x01	; 1
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	79 01       	movw	r14, r18
     bb8:	8a 01       	movw	r16, r20
     bba:	27 c0       	rjmp	.+78     	; 0xc0a <__pack_f+0x162>
     bbc:	60 38       	cpi	r22, 0x80	; 128
     bbe:	71 05       	cpc	r23, r1
     bc0:	64 f5       	brge	.+88     	; 0xc1a <__pack_f+0x172>
     bc2:	fb 01       	movw	r30, r22
     bc4:	e1 58       	subi	r30, 0x81	; 129
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	d8 01       	movw	r26, r16
     bca:	c7 01       	movw	r24, r14
     bcc:	8f 77       	andi	r24, 0x7F	; 127
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	a0 70       	andi	r26, 0x00	; 0
     bd2:	b0 70       	andi	r27, 0x00	; 0
     bd4:	80 34       	cpi	r24, 0x40	; 64
     bd6:	91 05       	cpc	r25, r1
     bd8:	a1 05       	cpc	r26, r1
     bda:	b1 05       	cpc	r27, r1
     bdc:	39 f4       	brne	.+14     	; 0xbec <__pack_f+0x144>
     bde:	e7 fe       	sbrs	r14, 7
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <__pack_f+0x154>
     be2:	80 e4       	ldi	r24, 0x40	; 64
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	a0 e0       	ldi	r26, 0x00	; 0
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <__pack_f+0x14c>
     bec:	8f e3       	ldi	r24, 0x3F	; 63
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e8 0e       	add	r14, r24
     bf6:	f9 1e       	adc	r15, r25
     bf8:	0a 1f       	adc	r16, r26
     bfa:	1b 1f       	adc	r17, r27
     bfc:	17 ff       	sbrs	r17, 7
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <__pack_f+0x162>
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	31 96       	adiw	r30, 0x01	; 1
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	16 95       	lsr	r17
     c0e:	07 95       	ror	r16
     c10:	f7 94       	ror	r15
     c12:	e7 94       	ror	r14
     c14:	8a 95       	dec	r24
     c16:	d1 f7       	brne	.-12     	; 0xc0c <__pack_f+0x164>
     c18:	05 c0       	rjmp	.+10     	; 0xc24 <__pack_f+0x17c>
     c1a:	ee 24       	eor	r14, r14
     c1c:	ff 24       	eor	r15, r15
     c1e:	87 01       	movw	r16, r14
     c20:	ef ef       	ldi	r30, 0xFF	; 255
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	6e 2f       	mov	r22, r30
     c26:	67 95       	ror	r22
     c28:	66 27       	eor	r22, r22
     c2a:	67 95       	ror	r22
     c2c:	90 2f       	mov	r25, r16
     c2e:	9f 77       	andi	r25, 0x7F	; 127
     c30:	d7 94       	ror	r13
     c32:	dd 24       	eor	r13, r13
     c34:	d7 94       	ror	r13
     c36:	8e 2f       	mov	r24, r30
     c38:	86 95       	lsr	r24
     c3a:	49 2f       	mov	r20, r25
     c3c:	46 2b       	or	r20, r22
     c3e:	58 2f       	mov	r21, r24
     c40:	5d 29       	or	r21, r13
     c42:	b7 01       	movw	r22, r14
     c44:	ca 01       	movw	r24, r20
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	08 95       	ret

00000c52 <__unpack_f>:
     c52:	fc 01       	movw	r30, r24
     c54:	db 01       	movw	r26, r22
     c56:	40 81       	ld	r20, Z
     c58:	51 81       	ldd	r21, Z+1	; 0x01
     c5a:	22 81       	ldd	r18, Z+2	; 0x02
     c5c:	62 2f       	mov	r22, r18
     c5e:	6f 77       	andi	r22, 0x7F	; 127
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	22 1f       	adc	r18, r18
     c64:	22 27       	eor	r18, r18
     c66:	22 1f       	adc	r18, r18
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	89 2f       	mov	r24, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	82 2b       	or	r24, r18
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	99 1f       	adc	r25, r25
     c76:	99 27       	eor	r25, r25
     c78:	99 1f       	adc	r25, r25
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	9c 93       	st	X, r25
     c7e:	11 97       	sbiw	r26, 0x01	; 1
     c80:	21 15       	cp	r18, r1
     c82:	31 05       	cpc	r19, r1
     c84:	a9 f5       	brne	.+106    	; 0xcf0 <__unpack_f+0x9e>
     c86:	41 15       	cp	r20, r1
     c88:	51 05       	cpc	r21, r1
     c8a:	61 05       	cpc	r22, r1
     c8c:	71 05       	cpc	r23, r1
     c8e:	11 f4       	brne	.+4      	; 0xc94 <__unpack_f+0x42>
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	37 c0       	rjmp	.+110    	; 0xd02 <__unpack_f+0xb0>
     c94:	82 e8       	ldi	r24, 0x82	; 130
     c96:	9f ef       	ldi	r25, 0xFF	; 255
     c98:	13 96       	adiw	r26, 0x03	; 3
     c9a:	9c 93       	st	X, r25
     c9c:	8e 93       	st	-X, r24
     c9e:	12 97       	sbiw	r26, 0x02	; 2
     ca0:	9a 01       	movw	r18, r20
     ca2:	ab 01       	movw	r20, r22
     ca4:	67 e0       	ldi	r22, 0x07	; 7
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	44 1f       	adc	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	6a 95       	dec	r22
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__unpack_f+0x54>
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	8c 93       	st	X, r24
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <__unpack_f+0x80>
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	44 1f       	adc	r20, r20
     cbe:	55 1f       	adc	r21, r21
     cc0:	12 96       	adiw	r26, 0x02	; 2
     cc2:	8d 91       	ld	r24, X+
     cc4:	9c 91       	ld	r25, X
     cc6:	13 97       	sbiw	r26, 0x03	; 3
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	13 96       	adiw	r26, 0x03	; 3
     ccc:	9c 93       	st	X, r25
     cce:	8e 93       	st	-X, r24
     cd0:	12 97       	sbiw	r26, 0x02	; 2
     cd2:	20 30       	cpi	r18, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	38 07       	cpc	r19, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	48 07       	cpc	r20, r24
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	58 07       	cpc	r21, r24
     ce0:	58 f3       	brcs	.-42     	; 0xcb8 <__unpack_f+0x66>
     ce2:	14 96       	adiw	r26, 0x04	; 4
     ce4:	2d 93       	st	X+, r18
     ce6:	3d 93       	st	X+, r19
     ce8:	4d 93       	st	X+, r20
     cea:	5c 93       	st	X, r21
     cec:	17 97       	sbiw	r26, 0x07	; 7
     cee:	08 95       	ret
     cf0:	2f 3f       	cpi	r18, 0xFF	; 255
     cf2:	31 05       	cpc	r19, r1
     cf4:	79 f4       	brne	.+30     	; 0xd14 <__unpack_f+0xc2>
     cf6:	41 15       	cp	r20, r1
     cf8:	51 05       	cpc	r21, r1
     cfa:	61 05       	cpc	r22, r1
     cfc:	71 05       	cpc	r23, r1
     cfe:	19 f4       	brne	.+6      	; 0xd06 <__unpack_f+0xb4>
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	8c 93       	st	X, r24
     d04:	08 95       	ret
     d06:	64 ff       	sbrs	r22, 4
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <__unpack_f+0xbe>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	8c 93       	st	X, r24
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <__unpack_f+0xe2>
     d10:	1c 92       	st	X, r1
     d12:	10 c0       	rjmp	.+32     	; 0xd34 <__unpack_f+0xe2>
     d14:	2f 57       	subi	r18, 0x7F	; 127
     d16:	30 40       	sbci	r19, 0x00	; 0
     d18:	13 96       	adiw	r26, 0x03	; 3
     d1a:	3c 93       	st	X, r19
     d1c:	2e 93       	st	-X, r18
     d1e:	12 97       	sbiw	r26, 0x02	; 2
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	8c 93       	st	X, r24
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	44 0f       	add	r20, r20
     d28:	55 1f       	adc	r21, r21
     d2a:	66 1f       	adc	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	8a 95       	dec	r24
     d30:	d1 f7       	brne	.-12     	; 0xd26 <__unpack_f+0xd4>
     d32:	70 64       	ori	r23, 0x40	; 64
     d34:	14 96       	adiw	r26, 0x04	; 4
     d36:	4d 93       	st	X+, r20
     d38:	5d 93       	st	X+, r21
     d3a:	6d 93       	st	X+, r22
     d3c:	7c 93       	st	X, r23
     d3e:	17 97       	sbiw	r26, 0x07	; 7
     d40:	08 95       	ret

00000d42 <__fpcmp_parts_f>:
     d42:	1f 93       	push	r17
     d44:	dc 01       	movw	r26, r24
     d46:	fb 01       	movw	r30, r22
     d48:	9c 91       	ld	r25, X
     d4a:	92 30       	cpi	r25, 0x02	; 2
     d4c:	08 f4       	brcc	.+2      	; 0xd50 <__fpcmp_parts_f+0xe>
     d4e:	47 c0       	rjmp	.+142    	; 0xdde <__fpcmp_parts_f+0x9c>
     d50:	80 81       	ld	r24, Z
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	08 f4       	brcc	.+2      	; 0xd58 <__fpcmp_parts_f+0x16>
     d56:	43 c0       	rjmp	.+134    	; 0xdde <__fpcmp_parts_f+0x9c>
     d58:	94 30       	cpi	r25, 0x04	; 4
     d5a:	51 f4       	brne	.+20     	; 0xd70 <__fpcmp_parts_f+0x2e>
     d5c:	11 96       	adiw	r26, 0x01	; 1
     d5e:	1c 91       	ld	r17, X
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	99 f5       	brne	.+102    	; 0xdca <__fpcmp_parts_f+0x88>
     d64:	81 81       	ldd	r24, Z+1	; 0x01
     d66:	68 2f       	mov	r22, r24
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	61 1b       	sub	r22, r17
     d6c:	71 09       	sbc	r23, r1
     d6e:	3f c0       	rjmp	.+126    	; 0xdee <__fpcmp_parts_f+0xac>
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	21 f0       	breq	.+8      	; 0xd7c <__fpcmp_parts_f+0x3a>
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	31 f4       	brne	.+12     	; 0xd84 <__fpcmp_parts_f+0x42>
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	b9 f1       	breq	.+110    	; 0xdea <__fpcmp_parts_f+0xa8>
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	88 23       	and	r24, r24
     d80:	89 f1       	breq	.+98     	; 0xde4 <__fpcmp_parts_f+0xa2>
     d82:	2d c0       	rjmp	.+90     	; 0xdde <__fpcmp_parts_f+0x9c>
     d84:	11 96       	adiw	r26, 0x01	; 1
     d86:	1c 91       	ld	r17, X
     d88:	11 97       	sbiw	r26, 0x01	; 1
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	f1 f0       	breq	.+60     	; 0xdca <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	18 17       	cp	r17, r24
     d92:	d9 f4       	brne	.+54     	; 0xdca <__fpcmp_parts_f+0x88>
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	2d 91       	ld	r18, X+
     d98:	3c 91       	ld	r19, X
     d9a:	13 97       	sbiw	r26, 0x03	; 3
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	82 17       	cp	r24, r18
     da2:	93 07       	cpc	r25, r19
     da4:	94 f0       	brlt	.+36     	; 0xdca <__fpcmp_parts_f+0x88>
     da6:	28 17       	cp	r18, r24
     da8:	39 07       	cpc	r19, r25
     daa:	bc f0       	brlt	.+46     	; 0xdda <__fpcmp_parts_f+0x98>
     dac:	14 96       	adiw	r26, 0x04	; 4
     dae:	8d 91       	ld	r24, X+
     db0:	9d 91       	ld	r25, X+
     db2:	0d 90       	ld	r0, X+
     db4:	bc 91       	ld	r27, X
     db6:	a0 2d       	mov	r26, r0
     db8:	24 81       	ldd	r18, Z+4	; 0x04
     dba:	35 81       	ldd	r19, Z+5	; 0x05
     dbc:	46 81       	ldd	r20, Z+6	; 0x06
     dbe:	57 81       	ldd	r21, Z+7	; 0x07
     dc0:	28 17       	cp	r18, r24
     dc2:	39 07       	cpc	r19, r25
     dc4:	4a 07       	cpc	r20, r26
     dc6:	5b 07       	cpc	r21, r27
     dc8:	18 f4       	brcc	.+6      	; 0xdd0 <__fpcmp_parts_f+0x8e>
     dca:	11 23       	and	r17, r17
     dcc:	41 f0       	breq	.+16     	; 0xdde <__fpcmp_parts_f+0x9c>
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <__fpcmp_parts_f+0xa2>
     dd0:	82 17       	cp	r24, r18
     dd2:	93 07       	cpc	r25, r19
     dd4:	a4 07       	cpc	r26, r20
     dd6:	b5 07       	cpc	r27, r21
     dd8:	40 f4       	brcc	.+16     	; 0xdea <__fpcmp_parts_f+0xa8>
     dda:	11 23       	and	r17, r17
     ddc:	19 f0       	breq	.+6      	; 0xde4 <__fpcmp_parts_f+0xa2>
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	05 c0       	rjmp	.+10     	; 0xdee <__fpcmp_parts_f+0xac>
     de4:	6f ef       	ldi	r22, 0xFF	; 255
     de6:	7f ef       	ldi	r23, 0xFF	; 255
     de8:	02 c0       	rjmp	.+4      	; 0xdee <__fpcmp_parts_f+0xac>
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	cb 01       	movw	r24, r22
     df0:	1f 91       	pop	r17
     df2:	08 95       	ret

00000df4 <loop>:
	pinMode(DETECTOR_OUT, INPUT);
	Serial.begin(9600);
	Serial.println("Press 1 for power, 2 for volume up, 3 for volume down, 4 for simple test, 5 for diode test, any other key for nothing...");
}

void loop() {
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29

	if (Serial.available() > 0) {
     e08:	85 eb       	ldi	r24, 0xB5	; 181
     e0a:	95 e0       	ldi	r25, 0x05	; 5
     e0c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN14HardwareSerial9availableEv>
     e10:	18 16       	cp	r1, r24
     e12:	19 06       	cpc	r1, r25
     e14:	0c f0       	brlt	.+2      	; 0xe18 <loop+0x24>
     e16:	1a c1       	rjmp	.+564    	; 0x104c <loop+0x258>
		int in = Serial.read();
     e18:	85 eb       	ldi	r24, 0xB5	; 181
     e1a:	95 e0       	ldi	r25, 0x05	; 5
     e1c:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN14HardwareSerial4readEv>
		int j = -1, k = -1;
		if (in == 49) {
     e20:	81 33       	cpi	r24, 0x31	; 49
     e22:	91 05       	cpc	r25, r1
     e24:	a1 f0       	breq	.+40     	; 0xe4e <loop+0x5a>
			j = 0;
		} else if (in == 50) {
     e26:	82 33       	cpi	r24, 0x32	; 50
     e28:	91 05       	cpc	r25, r1
     e2a:	19 f4       	brne	.+6      	; 0xe32 <loop+0x3e>
     e2c:	c1 e0       	ldi	r28, 0x01	; 1
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
     e30:	10 c0       	rjmp	.+32     	; 0xe52 <loop+0x5e>
			j = 1;
		} else if (in == 51) {
     e32:	83 33       	cpi	r24, 0x33	; 51
     e34:	91 05       	cpc	r25, r1
     e36:	19 f4       	brne	.+6      	; 0xe3e <loop+0x4a>
     e38:	c2 e0       	ldi	r28, 0x02	; 2
     e3a:	d0 e0       	ldi	r29, 0x00	; 0
     e3c:	0a c0       	rjmp	.+20     	; 0xe52 <loop+0x5e>
			j = 2;
		} else if (in == 52) {
     e3e:	84 33       	cpi	r24, 0x34	; 52
     e40:	91 05       	cpc	r25, r1
     e42:	09 f4       	brne	.+2      	; 0xe46 <loop+0x52>
     e44:	f8 c0       	rjmp	.+496    	; 0x1036 <loop+0x242>
			k = 0;
		} else if (in == 53) {
     e46:	c5 97       	sbiw	r24, 0x35	; 53
     e48:	09 f0       	breq	.+2      	; 0xe4c <loop+0x58>
     e4a:	ee c0       	rjmp	.+476    	; 0x1028 <loop+0x234>
     e4c:	e2 c0       	rjmp	.+452    	; 0x1012 <loop+0x21e>
     e4e:	c0 e0       	ldi	r28, 0x00	; 0
     e50:	d0 e0       	ldi	r29, 0x00	; 0
			k = 1;
		}
		if (j != -1) {
			unsigned int raw = cmd[j][0];
     e52:	8c e9       	ldi	r24, 0x9C	; 156
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	c8 9f       	mul	r28, r24
     e58:	50 01       	movw	r10, r0
     e5a:	c9 9f       	mul	r28, r25
     e5c:	b0 0c       	add	r11, r0
     e5e:	d8 9f       	mul	r29, r24
     e60:	b0 0c       	add	r11, r0
     e62:	11 24       	eor	r1, r1
     e64:	40 e4       	ldi	r20, 0x40	; 64
     e66:	c4 2e       	mov	r12, r20
     e68:	43 e0       	ldi	r20, 0x03	; 3
     e6a:	d4 2e       	mov	r13, r20
     e6c:	ca 0c       	add	r12, r10
     e6e:	db 1c       	adc	r13, r11
     e70:	f6 01       	movw	r30, r12
     e72:	00 81       	ld	r16, Z
     e74:	11 81       	ldd	r17, Z+1	; 0x01
			Serial.print("Is the data raw? ");
     e76:	85 eb       	ldi	r24, 0xB5	; 181
     e78:	95 e0       	ldi	r25, 0x05	; 5
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	71 e0       	ldi	r23, 0x01	; 1
     e7e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN5Print5printEPKc>
			Serial.println(1 - raw);
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	60 1b       	sub	r22, r16
     e88:	71 0b       	sbc	r23, r17
     e8a:	85 eb       	ldi	r24, 0xB5	; 181
     e8c:	95 e0       	ldi	r25, 0x05	; 5
     e8e:	4a e0       	ldi	r20, 0x0A	; 10
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN5Print7printlnEji>
			unsigned int frequency = 1000000 / (cmd[j][1] * 0.241246);
     e96:	8e e4       	ldi	r24, 0x4E	; 78
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	c8 9f       	mul	r28, r24
     e9c:	f0 01       	movw	r30, r0
     e9e:	c9 9f       	mul	r28, r25
     ea0:	f0 0d       	add	r31, r0
     ea2:	d8 9f       	mul	r29, r24
     ea4:	f0 0d       	add	r31, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	ee 5b       	subi	r30, 0xBE	; 190
     eae:	fc 4f       	sbci	r31, 0xFC	; 252
     eb0:	60 81       	ld	r22, Z
     eb2:	71 81       	ldd	r23, Z+1	; 0x01
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 8c 04 	call	0x918	; 0x918 <__floatunsisf>
     ebc:	21 e3       	ldi	r18, 0x31	; 49
     ebe:	39 e0       	ldi	r19, 0x09	; 9
     ec0:	47 e7       	ldi	r20, 0x77	; 119
     ec2:	5e e3       	ldi	r21, 0x3E	; 62
     ec4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__mulsf3>
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	74 e2       	ldi	r23, 0x24	; 36
     ed0:	84 e7       	ldi	r24, 0x74	; 116
     ed2:	99 e4       	ldi	r25, 0x49	; 73
     ed4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__divsf3>
     ed8:	0e 94 8c 00 	call	0x118	; 0x118 <__fixunssfsi>
     edc:	7b 01       	movw	r14, r22
     ede:	8c 01       	movw	r16, r24
			Serial.print("What is the frequency? ");
     ee0:	85 eb       	ldi	r24, 0xB5	; 181
     ee2:	95 e0       	ldi	r25, 0x05	; 5
     ee4:	62 e1       	ldi	r22, 0x12	; 18
     ee6:	71 e0       	ldi	r23, 0x01	; 1
     ee8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN5Print5printEPKc>
			Serial.println(frequency);
     eec:	85 eb       	ldi	r24, 0xB5	; 181
     eee:	95 e0       	ldi	r25, 0x05	; 5
     ef0:	b7 01       	movw	r22, r14
     ef2:	4a e0       	ldi	r20, 0x0A	; 10
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN5Print7printlnEji>
			unsigned int burst1 = cmd[j][2];
     efa:	87 e2       	ldi	r24, 0x27	; 39
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	c8 9f       	mul	r28, r24
     f00:	f0 01       	movw	r30, r0
     f02:	c9 9f       	mul	r28, r25
     f04:	f0 0d       	add	r31, r0
     f06:	d8 9f       	mul	r29, r24
     f08:	f0 0d       	add	r31, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	ec 5b       	subi	r30, 0xBC	; 188
     f16:	fc 4f       	sbci	r31, 0xFC	; 252
     f18:	00 81       	ld	r16, Z
     f1a:	11 81       	ldd	r17, Z+1	; 0x01
			Serial.print("How many in the first burst pattern? ");
     f1c:	85 eb       	ldi	r24, 0xB5	; 181
     f1e:	95 e0       	ldi	r25, 0x05	; 5
     f20:	6a e2       	ldi	r22, 0x2A	; 42
     f22:	71 e0       	ldi	r23, 0x01	; 1
     f24:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN5Print5printEPKc>
			Serial.println(burst1);
     f28:	85 eb       	ldi	r24, 0xB5	; 181
     f2a:	95 e0       	ldi	r25, 0x05	; 5
     f2c:	b8 01       	movw	r22, r16
     f2e:	4a e0       	ldi	r20, 0x0A	; 10
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN5Print7printlnEji>
			unsigned int burst2 = cmd[j][3];
     f36:	f6 01       	movw	r30, r12
     f38:	06 81       	ldd	r16, Z+6	; 0x06
     f3a:	17 81       	ldd	r17, Z+7	; 0x07
			Serial.print("How many in the second burst pattern? ");
     f3c:	85 eb       	ldi	r24, 0xB5	; 181
     f3e:	95 e0       	ldi	r25, 0x05	; 5
     f40:	60 e5       	ldi	r22, 0x50	; 80
     f42:	71 e0       	ldi	r23, 0x01	; 1
     f44:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN5Print5printEPKc>
			Serial.println(burst2);
     f48:	85 eb       	ldi	r24, 0xB5	; 181
     f4a:	95 e0       	ldi	r25, 0x05	; 5
     f4c:	b8 01       	movw	r22, r16
     f4e:	4a e0       	ldi	r20, 0x0A	; 10
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN5Print7printlnEji>
     f56:	98 e4       	ldi	r25, 0x48	; 72
     f58:	e9 2e       	mov	r14, r25
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	f9 2e       	mov	r15, r25
     f5e:	ea 0c       	add	r14, r10
     f60:	fb 1c       	adc	r15, r11
     f62:	04 e0       	ldi	r16, 0x04	; 4
     f64:	10 e0       	ldi	r17, 0x00	; 0
						digitalWrite(EMITTER_PIN, LOW);
						delayMicroseconds(WAIT);
						scratch = scratch - PULSE;
					}
				} else {
					delayMicroseconds(cmd[j][i] * PULSE);
     f66:	89 e1       	ldi	r24, 0x19	; 25
     f68:	c8 2e       	mov	r12, r24
     f6a:	d1 2c       	mov	r13, r1
     f6c:	f7 01       	movw	r30, r14
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
			Serial.println(burst1);
			unsigned int burst2 = cmd[j][3];
			Serial.print("How many in the second burst pattern? ");
			Serial.println(burst2);
			for (int i = 4; i < 78; i++) {
				if (i % 2 == 0) {
     f72:	00 fd       	sbrc	r16, 0
     f74:	1d c0       	rjmp	.+58     	; 0xfb0 <loop+0x1bc>
					int scratch = cmd[j][i] * PULSE;
     f76:	2c 9d       	mul	r18, r12
     f78:	e0 01       	movw	r28, r0
     f7a:	2d 9d       	mul	r18, r13
     f7c:	d0 0d       	add	r29, r0
     f7e:	3c 9d       	mul	r19, r12
     f80:	d0 0d       	add	r29, r0
     f82:	11 24       	eor	r1, r1
     f84:	11 c0       	rjmp	.+34     	; 0xfa8 <loop+0x1b4>
					while(scratch > PULSE) {
						digitalWrite(EMITTER_PIN, HIGH);
     f86:	8d e0       	ldi	r24, 0x0D	; 13
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	0e 94 1a 09 	call	0x1234	; 0x1234 <digitalWrite>
						delayMicroseconds(WAIT);
     f8e:	8a e0       	ldi	r24, 0x0A	; 10
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 af 08 	call	0x115e	; 0x115e <delayMicroseconds>
						digitalWrite(EMITTER_PIN, LOW);
     f96:	8d e0       	ldi	r24, 0x0D	; 13
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	0e 94 1a 09 	call	0x1234	; 0x1234 <digitalWrite>
						delayMicroseconds(WAIT);
     f9e:	8a e0       	ldi	r24, 0x0A	; 10
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 af 08 	call	0x115e	; 0x115e <delayMicroseconds>
						scratch = scratch - PULSE;
     fa6:	69 97       	sbiw	r28, 0x19	; 25
			Serial.print("How many in the second burst pattern? ");
			Serial.println(burst2);
			for (int i = 4; i < 78; i++) {
				if (i % 2 == 0) {
					int scratch = cmd[j][i] * PULSE;
					while(scratch > PULSE) {
     fa8:	ca 31       	cpi	r28, 0x1A	; 26
     faa:	d1 05       	cpc	r29, r1
     fac:	64 f7       	brge	.-40     	; 0xf86 <loop+0x192>
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <loop+0x1ce>
						digitalWrite(EMITTER_PIN, LOW);
						delayMicroseconds(WAIT);
						scratch = scratch - PULSE;
					}
				} else {
					delayMicroseconds(cmd[j][i] * PULSE);
     fb0:	2c 9d       	mul	r18, r12
     fb2:	c0 01       	movw	r24, r0
     fb4:	2d 9d       	mul	r18, r13
     fb6:	90 0d       	add	r25, r0
     fb8:	3c 9d       	mul	r19, r12
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	0e 94 af 08 	call	0x115e	; 0x115e <delayMicroseconds>
			Serial.print("How many in the first burst pattern? ");
			Serial.println(burst1);
			unsigned int burst2 = cmd[j][3];
			Serial.print("How many in the second burst pattern? ");
			Serial.println(burst2);
			for (int i = 4; i < 78; i++) {
     fc2:	0f 5f       	subi	r16, 0xFF	; 255
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	e8 0e       	add	r14, r24
     fcc:	f9 1e       	adc	r15, r25
     fce:	0e 34       	cpi	r16, 0x4E	; 78
     fd0:	11 05       	cpc	r17, r1
     fd2:	61 f6       	brne	.-104    	; 0xf6c <loop+0x178>
     fd4:	3b c0       	rjmp	.+118    	; 0x104c <loop+0x258>
		} else if (k != -1) {
			if (k == 0) {
				Serial.println("Trying the simple detector...");
				digitalWrite(DETECTOR_PIN, HIGH);
				for (int i = 0; i < 1000000; i++) {
					Serial.println(digitalRead(DETECTOR_OUT));
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <digitalRead>
     fdc:	bc 01       	movw	r22, r24
     fde:	85 eb       	ldi	r24, 0xB5	; 181
     fe0:	95 e0       	ldi	r25, 0x05	; 5
     fe2:	4a e0       	ldi	r20, 0x0A	; 10
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEii>
					delayMicroseconds(1);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 af 08 	call	0x115e	; 0x115e <delayMicroseconds>
     ff2:	f1 cf       	rjmp	.-30     	; 0xfd6 <loop+0x1e2>
				Serial.println("Done trying the simple detector!");
			} else if (k == 1) {
				Serial.println("Trying the diode detector...");
				digitalWrite(DIODE_IN, HIGH);
				for (int i = 0; i < 1000000; i++) {
					Serial.println(digitalRead(DIODE_OUT));
     ff4:	88 e0       	ldi	r24, 0x08	; 8
     ff6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <digitalRead>
     ffa:	bc 01       	movw	r22, r24
     ffc:	85 eb       	ldi	r24, 0xB5	; 181
     ffe:	95 e0       	ldi	r25, 0x05	; 5
    1000:	4a e0       	ldi	r20, 0x0A	; 10
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_ZN5Print7printlnEii>
					delayMicroseconds(1);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 af 08 	call	0x115e	; 0x115e <delayMicroseconds>
    1010:	f1 cf       	rjmp	.-30     	; 0xff4 <loop+0x200>
					Serial.println(digitalRead(DETECTOR_OUT));
					delayMicroseconds(1);
				}
				Serial.println("Done trying the simple detector!");
			} else if (k == 1) {
				Serial.println("Trying the diode detector...");
    1012:	85 eb       	ldi	r24, 0xB5	; 181
    1014:	95 e0       	ldi	r25, 0x05	; 5
    1016:	67 e7       	ldi	r22, 0x77	; 119
    1018:	71 e0       	ldi	r23, 0x01	; 1
    101a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print7printlnEPKc>
				digitalWrite(DIODE_IN, HIGH);
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	0e 94 1a 09 	call	0x1234	; 0x1234 <digitalWrite>
    1026:	e6 cf       	rjmp	.-52     	; 0xff4 <loop+0x200>
					delayMicroseconds(1);
				}
				Serial.println("Done trying the diode detector!");
			}
		} else {
			Serial.println("Invalid key!");
    1028:	85 eb       	ldi	r24, 0xB5	; 181
    102a:	95 e0       	ldi	r25, 0x05	; 5
    102c:	64 e9       	ldi	r22, 0x94	; 148
    102e:	71 e0       	ldi	r23, 0x01	; 1
    1030:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print7printlnEPKc>
    1034:	0b c0       	rjmp	.+22     	; 0x104c <loop+0x258>
					delayMicroseconds(cmd[j][i] * PULSE);
				}
			}
		} else if (k != -1) {
			if (k == 0) {
				Serial.println("Trying the simple detector...");
    1036:	85 eb       	ldi	r24, 0xB5	; 181
    1038:	95 e0       	ldi	r25, 0x05	; 5
    103a:	61 ea       	ldi	r22, 0xA1	; 161
    103c:	71 e0       	ldi	r23, 0x01	; 1
    103e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print7printlnEPKc>
				digitalWrite(DETECTOR_PIN, HIGH);
    1042:	8c e0       	ldi	r24, 0x0C	; 12
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 1a 09 	call	0x1234	; 0x1234 <digitalWrite>
    104a:	c5 cf       	rjmp	.-118    	; 0xfd6 <loop+0x1e2>
		} else {
			Serial.println("Invalid key!");
		}
	}

}
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	08 95       	ret

00001062 <setup>:

void off(int time) {
	//
}

void setup() {
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
	pinMode(EMITTER_PIN, OUTPUT);
    1066:	8d e0       	ldi	r24, 0x0D	; 13
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <pinMode>
	pinMode(DETECTOR_PIN, OUTPUT);
    106e:	8c e0       	ldi	r24, 0x0C	; 12
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <pinMode>
	pinMode(DIODE_IN, OUTPUT);
    1076:	87 e0       	ldi	r24, 0x07	; 7
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <pinMode>
	pinMode(DIODE_OUT, INPUT);
    107e:	88 e0       	ldi	r24, 0x08	; 8
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <pinMode>
	pinMode(DETECTOR_OUT, INPUT);
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <pinMode>
	Serial.begin(9600);
    108e:	05 eb       	ldi	r16, 0xB5	; 181
    1090:	15 e0       	ldi	r17, 0x05	; 5
    1092:	c8 01       	movw	r24, r16
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	55 e2       	ldi	r21, 0x25	; 37
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_ZN14HardwareSerial5beginEm>
	Serial.println("Press 1 for power, 2 for volume up, 3 for volume down, 4 for simple test, 5 for diode test, any other key for nothing...");
    10a0:	c8 01       	movw	r24, r16
    10a2:	6f eb       	ldi	r22, 0xBF	; 191
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN5Print7printlnEPKc>
}
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <main>:
#include "Arduino.h"
#include "Wifimote.h"

int main(void)
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
{
	init();
    10b4:	0e 94 b9 08 	call	0x1172	; 0x1172 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    10b8:	0e 94 31 08 	call	0x1062	; 0x1062 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    10bc:	c6 ef       	ldi	r28, 0xF6	; 246
    10be:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    10c0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <loop>
		if (serialEventRun) serialEventRun();
    10c4:	20 97       	sbiw	r28, 0x00	; 0
    10c6:	e1 f3       	breq	.-8      	; 0x10c0 <main+0x10>
    10c8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_Z14serialEventRunv>
    10cc:	f9 cf       	rjmp	.-14     	; 0x10c0 <main+0x10>

000010ce <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	2f 93       	push	r18
    10da:	3f 93       	push	r19
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	af 93       	push	r26
    10e2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    10e4:	80 91 28 05 	lds	r24, 0x0528
    10e8:	90 91 29 05 	lds	r25, 0x0529
    10ec:	a0 91 2a 05 	lds	r26, 0x052A
    10f0:	b0 91 2b 05 	lds	r27, 0x052B
	unsigned char f = timer0_fract;
    10f4:	30 91 2c 05 	lds	r19, 0x052C

	m += MILLIS_INC;
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	a1 1d       	adc	r26, r1
    10fc:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    10fe:	23 2f       	mov	r18, r19
    1100:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1102:	2d 37       	cpi	r18, 0x7D	; 125
    1104:	20 f0       	brcs	.+8      	; 0x110e <__vector_16+0x40>
		f -= FRACT_MAX;
    1106:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	a1 1d       	adc	r26, r1
    110c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    110e:	20 93 2c 05 	sts	0x052C, r18
	timer0_millis = m;
    1112:	80 93 28 05 	sts	0x0528, r24
    1116:	90 93 29 05 	sts	0x0529, r25
    111a:	a0 93 2a 05 	sts	0x052A, r26
    111e:	b0 93 2b 05 	sts	0x052B, r27
	timer0_overflow_count++;
    1122:	80 91 24 05 	lds	r24, 0x0524
    1126:	90 91 25 05 	lds	r25, 0x0525
    112a:	a0 91 26 05 	lds	r26, 0x0526
    112e:	b0 91 27 05 	lds	r27, 0x0527
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	a1 1d       	adc	r26, r1
    1136:	b1 1d       	adc	r27, r1
    1138:	80 93 24 05 	sts	0x0524, r24
    113c:	90 93 25 05 	sts	0x0525, r25
    1140:	a0 93 26 05 	sts	0x0526, r26
    1144:	b0 93 27 05 	sts	0x0527, r27
}
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	39 f0       	breq	.+14     	; 0x1170 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    116a:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <delayMicroseconds+0xe>
    1170:	08 95       	ret

00001172 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1172:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1174:	84 b5       	in	r24, 0x24	; 36
    1176:	82 60       	ori	r24, 0x02	; 2
    1178:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    117a:	84 b5       	in	r24, 0x24	; 36
    117c:	81 60       	ori	r24, 0x01	; 1
    117e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1180:	85 b5       	in	r24, 0x25	; 37
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1186:	85 b5       	in	r24, 0x25	; 37
    1188:	81 60       	ori	r24, 0x01	; 1
    118a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    118c:	ee e6       	ldi	r30, 0x6E	; 110
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1196:	e1 e8       	ldi	r30, 0x81	; 129
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    119c:	80 81       	ld	r24, Z
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11a2:	80 81       	ld	r24, Z
    11a4:	81 60       	ori	r24, 0x01	; 1
    11a6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11a8:	e0 e8       	ldi	r30, 0x80	; 128
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11b2:	e1 eb       	ldi	r30, 0xB1	; 177
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	84 60       	ori	r24, 0x04	; 4
    11ba:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11bc:	e0 eb       	ldi	r30, 0xB0	; 176
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	81 60       	ori	r24, 0x01	; 1
    11c4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    11c6:	ea e7       	ldi	r30, 0x7A	; 122
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	84 60       	ori	r24, 0x04	; 4
    11ce:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    11d0:	80 81       	ld	r24, Z
    11d2:	82 60       	ori	r24, 0x02	; 2
    11d4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    11d6:	80 81       	ld	r24, Z
    11d8:	81 60       	ori	r24, 0x01	; 1
    11da:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    11dc:	80 81       	ld	r24, Z
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    11e2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    11e6:	08 95       	ret

000011e8 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    11e8:	48 2f       	mov	r20, r24
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	ca 01       	movw	r24, r20
    11ee:	86 56       	subi	r24, 0x66	; 102
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	fc 01       	movw	r30, r24
    11f4:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    11f6:	4a 57       	subi	r20, 0x7A	; 122
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	fa 01       	movw	r30, r20
    11fc:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    11fe:	88 23       	and	r24, r24
    1200:	c1 f0       	breq	.+48     	; 0x1232 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1202:	e8 2f       	mov	r30, r24
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	e8 59       	subi	r30, 0x98	; 152
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	a5 91       	lpm	r26, Z+
    1210:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    1212:	66 23       	and	r22, r22
    1214:	41 f4       	brne	.+16     	; 0x1226 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    1216:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1218:	f8 94       	cli
		*reg &= ~bit;
    121a:	8c 91       	ld	r24, X
    121c:	20 95       	com	r18
    121e:	82 23       	and	r24, r18
    1220:	8c 93       	st	X, r24
		SREG = oldSREG;
    1222:	9f bf       	out	0x3f, r25	; 63
    1224:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1226:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1228:	f8 94       	cli
		*reg |= bit;
    122a:	8c 91       	ld	r24, X
    122c:	82 2b       	or	r24, r18
    122e:	8c 93       	st	X, r24
		SREG = oldSREG;
    1230:	9f bf       	out	0x3f, r25	; 63
    1232:	08 95       	ret

00001234 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1234:	48 2f       	mov	r20, r24
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	ca 01       	movw	r24, r20
    123a:	82 55       	subi	r24, 0x52	; 82
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	fc 01       	movw	r30, r24
    1240:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1242:	ca 01       	movw	r24, r20
    1244:	86 56       	subi	r24, 0x66	; 102
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	fc 01       	movw	r30, r24
    124a:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    124c:	4a 57       	subi	r20, 0x7A	; 122
    124e:	5f 4f       	sbci	r21, 0xFF	; 255
    1250:	fa 01       	movw	r30, r20
    1252:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1254:	33 23       	and	r19, r19
    1256:	09 f4       	brne	.+2      	; 0x125a <digitalWrite+0x26>
    1258:	40 c0       	rjmp	.+128    	; 0x12da <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    125a:	22 23       	and	r18, r18
    125c:	51 f1       	breq	.+84     	; 0x12b2 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    125e:	23 30       	cpi	r18, 0x03	; 3
    1260:	71 f0       	breq	.+28     	; 0x127e <digitalWrite+0x4a>
    1262:	24 30       	cpi	r18, 0x04	; 4
    1264:	28 f4       	brcc	.+10     	; 0x1270 <digitalWrite+0x3c>
    1266:	21 30       	cpi	r18, 0x01	; 1
    1268:	a1 f0       	breq	.+40     	; 0x1292 <digitalWrite+0x5e>
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	11 f5       	brne	.+68     	; 0x12b2 <digitalWrite+0x7e>
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <digitalWrite+0x64>
    1270:	26 30       	cpi	r18, 0x06	; 6
    1272:	b1 f0       	breq	.+44     	; 0x12a0 <digitalWrite+0x6c>
    1274:	27 30       	cpi	r18, 0x07	; 7
    1276:	c1 f0       	breq	.+48     	; 0x12a8 <digitalWrite+0x74>
    1278:	24 30       	cpi	r18, 0x04	; 4
    127a:	d9 f4       	brne	.+54     	; 0x12b2 <digitalWrite+0x7e>
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    127e:	80 91 80 00 	lds	r24, 0x0080
    1282:	8f 77       	andi	r24, 0x7F	; 127
    1284:	03 c0       	rjmp	.+6      	; 0x128c <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1286:	80 91 80 00 	lds	r24, 0x0080
    128a:	8f 7d       	andi	r24, 0xDF	; 223
    128c:	80 93 80 00 	sts	0x0080, r24
    1290:	10 c0       	rjmp	.+32     	; 0x12b2 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1292:	84 b5       	in	r24, 0x24	; 36
    1294:	8f 77       	andi	r24, 0x7F	; 127
    1296:	02 c0       	rjmp	.+4      	; 0x129c <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1298:	84 b5       	in	r24, 0x24	; 36
    129a:	8f 7d       	andi	r24, 0xDF	; 223
    129c:	84 bd       	out	0x24, r24	; 36
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    12a0:	80 91 b0 00 	lds	r24, 0x00B0
    12a4:	8f 77       	andi	r24, 0x7F	; 127
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    12a8:	80 91 b0 00 	lds	r24, 0x00B0
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    12b2:	e3 2f       	mov	r30, r19
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	ee 58       	subi	r30, 0x8E	; 142
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	a5 91       	lpm	r26, Z+
    12c0:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    12c2:	2f b7       	in	r18, 0x3f	; 63
	cli();
    12c4:	f8 94       	cli

	if (val == LOW) {
    12c6:	66 23       	and	r22, r22
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <digitalWrite+0x9e>
		*out &= ~bit;
    12ca:	8c 91       	ld	r24, X
    12cc:	90 95       	com	r25
    12ce:	89 23       	and	r24, r25
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    12d2:	8c 91       	ld	r24, X
    12d4:	89 2b       	or	r24, r25
    12d6:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    12d8:	2f bf       	out	0x3f, r18	; 63
    12da:	08 95       	ret

000012dc <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    12dc:	68 2f       	mov	r22, r24
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	cb 01       	movw	r24, r22
    12e2:	82 55       	subi	r24, 0x52	; 82
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	fc 01       	movw	r30, r24
    12e8:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    12ea:	cb 01       	movw	r24, r22
    12ec:	86 56       	subi	r24, 0x66	; 102
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	fc 01       	movw	r30, r24
    12f2:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    12f4:	6a 57       	subi	r22, 0x7A	; 122
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	fb 01       	movw	r30, r22
    12fa:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    12fc:	99 23       	and	r25, r25
    12fe:	19 f4       	brne	.+6      	; 0x1306 <digitalRead+0x2a>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3c c0       	rjmp	.+120    	; 0x137e <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1306:	22 23       	and	r18, r18
    1308:	51 f1       	breq	.+84     	; 0x135e <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    130a:	23 30       	cpi	r18, 0x03	; 3
    130c:	71 f0       	breq	.+28     	; 0x132a <digitalRead+0x4e>
    130e:	24 30       	cpi	r18, 0x04	; 4
    1310:	28 f4       	brcc	.+10     	; 0x131c <digitalRead+0x40>
    1312:	21 30       	cpi	r18, 0x01	; 1
    1314:	a1 f0       	breq	.+40     	; 0x133e <digitalRead+0x62>
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	11 f5       	brne	.+68     	; 0x135e <digitalRead+0x82>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <digitalRead+0x68>
    131c:	26 30       	cpi	r18, 0x06	; 6
    131e:	b1 f0       	breq	.+44     	; 0x134c <digitalRead+0x70>
    1320:	27 30       	cpi	r18, 0x07	; 7
    1322:	c1 f0       	breq	.+48     	; 0x1354 <digitalRead+0x78>
    1324:	24 30       	cpi	r18, 0x04	; 4
    1326:	d9 f4       	brne	.+54     	; 0x135e <digitalRead+0x82>
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    132a:	80 91 80 00 	lds	r24, 0x0080
    132e:	8f 77       	andi	r24, 0x7F	; 127
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1332:	80 91 80 00 	lds	r24, 0x0080
    1336:	8f 7d       	andi	r24, 0xDF	; 223
    1338:	80 93 80 00 	sts	0x0080, r24
    133c:	10 c0       	rjmp	.+32     	; 0x135e <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    133e:	84 b5       	in	r24, 0x24	; 36
    1340:	8f 77       	andi	r24, 0x7F	; 127
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1344:	84 b5       	in	r24, 0x24	; 36
    1346:	8f 7d       	andi	r24, 0xDF	; 223
    1348:	84 bd       	out	0x24, r24	; 36
    134a:	09 c0       	rjmp	.+18     	; 0x135e <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    134c:	80 91 b0 00 	lds	r24, 0x00B0
    1350:	8f 77       	andi	r24, 0x7F	; 127
    1352:	03 c0       	rjmp	.+6      	; 0x135a <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1354:	80 91 b0 00 	lds	r24, 0x00B0
    1358:	8f 7d       	andi	r24, 0xDF	; 223
    135a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    135e:	89 2f       	mov	r24, r25
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	84 58       	subi	r24, 0x84	; 132
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	fc 01       	movw	r30, r24
    136c:	a5 91       	lpm	r26, Z+
    136e:	b4 91       	lpm	r27, Z+
    1370:	8c 91       	ld	r24, X
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	84 23       	and	r24, r20
    1378:	11 f0       	breq	.+4      	; 0x137e <digitalRead+0xa2>
    137a:	21 e0       	ldi	r18, 0x01	; 1
    137c:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    137e:	c9 01       	movw	r24, r18
    1380:	08 95       	ret

00001382 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1382:	08 95       	ret

00001384 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	8f 93       	push	r24
    1396:	9f 93       	push	r25
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    139c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    13a0:	20 91 6d 05 	lds	r18, 0x056D
    13a4:	30 91 6e 05 	lds	r19, 0x056E
    13a8:	2f 5f       	subi	r18, 0xFF	; 255
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	2f 73       	andi	r18, 0x3F	; 63
    13ae:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    13b0:	80 91 6f 05 	lds	r24, 0x056F
    13b4:	90 91 70 05 	lds	r25, 0x0570
    13b8:	28 17       	cp	r18, r24
    13ba:	39 07       	cpc	r19, r25
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    13be:	e0 91 6d 05 	lds	r30, 0x056D
    13c2:	f0 91 6e 05 	lds	r31, 0x056E
    13c6:	e3 5d       	subi	r30, 0xD3	; 211
    13c8:	fa 4f       	sbci	r31, 0xFA	; 250
    13ca:	40 83       	st	Z, r20
    buffer->head = i;
    13cc:	30 93 6e 05 	sts	0x056E, r19
    13d0:	20 93 6d 05 	sts	0x056D, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	4f 91       	pop	r20
    13de:	3f 91       	pop	r19
    13e0:	2f 91       	pop	r18
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	0f 90       	pop	r0
    13e8:	1f 90       	pop	r1
    13ea:	18 95       	reti

000013ec <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    13ec:	e0 91 c1 05 	lds	r30, 0x05C1
    13f0:	f0 91 c2 05 	lds	r31, 0x05C2
    13f4:	e0 5c       	subi	r30, 0xC0	; 192
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	81 91       	ld	r24, Z+
    13fa:	91 91       	ld	r25, Z+
    13fc:	20 81       	ld	r18, Z
    13fe:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1400:	82 1b       	sub	r24, r18
    1402:	93 0b       	sbc	r25, r19
    1404:	8f 73       	andi	r24, 0x3F	; 63
    1406:	90 70       	andi	r25, 0x00	; 0
    1408:	89 2b       	or	r24, r25
    140a:	11 f0       	breq	.+4      	; 0x1410 <_Z14serialEventRunv+0x24>
    140c:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z11serialEventv>
    1410:	08 95       	ret

00001412 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	4f 93       	push	r20
    1422:	5f 93       	push	r21
    1424:	6f 93       	push	r22
    1426:	7f 93       	push	r23
    1428:	8f 93       	push	r24
    142a:	9f 93       	push	r25
    142c:	af 93       	push	r26
    142e:	bf 93       	push	r27
    1430:	ef 93       	push	r30
    1432:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1434:	20 91 b1 05 	lds	r18, 0x05B1
    1438:	30 91 b2 05 	lds	r19, 0x05B2
    143c:	80 91 b3 05 	lds	r24, 0x05B3
    1440:	90 91 b4 05 	lds	r25, 0x05B4
    1444:	28 17       	cp	r18, r24
    1446:	39 07       	cpc	r19, r25
    1448:	31 f4       	brne	.+12     	; 0x1456 <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    144a:	80 91 c1 00 	lds	r24, 0x00C1
    144e:	8f 7d       	andi	r24, 0xDF	; 223
    1450:	80 93 c1 00 	sts	0x00C1, r24
    1454:	16 c0       	rjmp	.+44     	; 0x1482 <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1456:	e0 91 b3 05 	lds	r30, 0x05B3
    145a:	f0 91 b4 05 	lds	r31, 0x05B4
    145e:	ef 58       	subi	r30, 0x8F	; 143
    1460:	fa 4f       	sbci	r31, 0xFA	; 250
    1462:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1464:	80 91 b3 05 	lds	r24, 0x05B3
    1468:	90 91 b4 05 	lds	r25, 0x05B4
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	60 e4       	ldi	r22, 0x40	; 64
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
    1476:	90 93 b4 05 	sts	0x05B4, r25
    147a:	80 93 b3 05 	sts	0x05B3, r24
	
  #if defined(UDR0)
    UDR0 = c;
    147e:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
    14b8:	7a 01       	movw	r14, r20
    14ba:	8b 01       	movw	r16, r22
    14bc:	dd 24       	eor	r13, r13
    14be:	40 30       	cpi	r20, 0x00	; 0
    14c0:	81 ee       	ldi	r24, 0xE1	; 225
    14c2:	58 07       	cpc	r21, r24
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	68 07       	cpc	r22, r24
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	78 07       	cpc	r23, r24
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <_ZN14HardwareSerial5beginEm+0x2e>
    14ce:	dd 24       	eor	r13, r13
    14d0:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	a9 2e       	mov	r10, r25
    14d6:	b1 2c       	mov	r11, r1
    14d8:	ec 89       	ldd	r30, Y+20	; 0x14
    14da:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    14dc:	dd 20       	and	r13, r13
    14de:	69 f0       	breq	.+26     	; 0x14fa <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    14e0:	c5 01       	movw	r24, r10
    14e2:	0e 8c       	ldd	r0, Y+30	; 0x1e
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <_ZN14HardwareSerial5beginEm+0x46>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <_ZN14HardwareSerial5beginEm+0x42>
    14ee:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	79 e0       	ldi	r23, 0x09	; 9
    14f4:	8d e3       	ldi	r24, 0x3D	; 61
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    14fa:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    14fc:	60 e8       	ldi	r22, 0x80	; 128
    14fe:	74 e8       	ldi	r23, 0x84	; 132
    1500:	8e e1       	ldi	r24, 0x1E	; 30
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a8 01       	movw	r20, r16
    1506:	97 01       	movw	r18, r14
    1508:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodsi4>
    150c:	21 50       	subi	r18, 0x01	; 1
    150e:	30 40       	sbci	r19, 0x00	; 0
    1510:	40 40       	sbci	r20, 0x00	; 0
    1512:	50 40       	sbci	r21, 0x00	; 0
    1514:	56 95       	lsr	r21
    1516:	47 95       	ror	r20
    1518:	37 95       	ror	r19
    151a:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    151c:	80 e1       	ldi	r24, 0x10	; 16
    151e:	20 30       	cpi	r18, 0x00	; 0
    1520:	38 07       	cpc	r19, r24
    1522:	20 f0       	brcs	.+8      	; 0x152c <_ZN14HardwareSerial5beginEm+0x88>
    1524:	dd 20       	and	r13, r13
    1526:	11 f0       	breq	.+4      	; 0x152c <_ZN14HardwareSerial5beginEm+0x88>
    1528:	dd 24       	eor	r13, r13
    152a:	d6 cf       	rjmp	.-84     	; 0x14d8 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    152c:	e8 89       	ldd	r30, Y+16	; 0x10
    152e:	f9 89       	ldd	r31, Y+17	; 0x11
    1530:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1532:	ea 89       	ldd	r30, Y+18	; 0x12
    1534:	fb 89       	ldd	r31, Y+19	; 0x13
    1536:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1538:	ee 89       	ldd	r30, Y+22	; 0x16
    153a:	ff 89       	ldd	r31, Y+23	; 0x17
    153c:	40 81       	ld	r20, Z
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	c9 01       	movw	r24, r18
    1544:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1546:	02 c0       	rjmp	.+4      	; 0x154c <_ZN14HardwareSerial5beginEm+0xa8>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <_ZN14HardwareSerial5beginEm+0xa4>
    1550:	48 2b       	or	r20, r24
    1552:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1554:	ee 89       	ldd	r30, Y+22	; 0x16
    1556:	ff 89       	ldd	r31, Y+23	; 0x17
    1558:	40 81       	ld	r20, Z
    155a:	c9 01       	movw	r24, r18
    155c:	0b 8c       	ldd	r0, Y+27	; 0x1b
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <_ZN14HardwareSerial5beginEm+0xc0>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <_ZN14HardwareSerial5beginEm+0xbc>
    1568:	48 2b       	or	r20, r24
    156a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    156c:	ee 89       	ldd	r30, Y+22	; 0x16
    156e:	ff 89       	ldd	r31, Y+23	; 0x17
    1570:	40 81       	ld	r20, Z
    1572:	c9 01       	movw	r24, r18
    1574:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1576:	02 c0       	rjmp	.+4      	; 0x157c <_ZN14HardwareSerial5beginEm+0xd8>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <_ZN14HardwareSerial5beginEm+0xd4>
    1580:	48 2b       	or	r20, r24
    1582:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1584:	ee 89       	ldd	r30, Y+22	; 0x16
    1586:	ff 89       	ldd	r31, Y+23	; 0x17
    1588:	80 81       	ld	r24, Z
    158a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <_ZN14HardwareSerial5beginEm+0xee>
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <_ZN14HardwareSerial5beginEm+0xea>
    1596:	20 95       	com	r18
    1598:	28 23       	and	r18, r24
    159a:	20 83       	st	Z, r18
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	bf 90       	pop	r11
    15ac:	af 90       	pop	r10
    15ae:	08 95       	ret

000015b0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    15b0:	dc 01       	movw	r26, r24
    15b2:	1c 96       	adiw	r26, 0x0c	; 12
    15b4:	ed 91       	ld	r30, X+
    15b6:	fc 91       	ld	r31, X
    15b8:	1d 97       	sbiw	r26, 0x0d	; 13
    15ba:	e0 5c       	subi	r30, 0xC0	; 192
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	21 91       	ld	r18, Z+
    15c0:	31 91       	ld	r19, Z+
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	28 1b       	sub	r18, r24
    15c8:	39 0b       	sbc	r19, r25
    15ca:	2f 73       	andi	r18, 0x3F	; 63
    15cc:	30 70       	andi	r19, 0x00	; 0
}
    15ce:	c9 01       	movw	r24, r18
    15d0:	08 95       	ret

000015d2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    15d2:	dc 01       	movw	r26, r24
    15d4:	1c 96       	adiw	r26, 0x0c	; 12
    15d6:	ed 91       	ld	r30, X+
    15d8:	fc 91       	ld	r31, X
    15da:	1d 97       	sbiw	r26, 0x0d	; 13
    15dc:	e0 5c       	subi	r30, 0xC0	; 192
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	20 81       	ld	r18, Z
    15e2:	31 81       	ldd	r19, Z+1	; 0x01
    15e4:	e0 54       	subi	r30, 0x40	; 64
    15e6:	f0 40       	sbci	r31, 0x00	; 0
    15e8:	df 01       	movw	r26, r30
    15ea:	ae 5b       	subi	r26, 0xBE	; 190
    15ec:	bf 4f       	sbci	r27, 0xFF	; 255
    15ee:	8d 91       	ld	r24, X+
    15f0:	9c 91       	ld	r25, X
    15f2:	11 97       	sbiw	r26, 0x01	; 1
    15f4:	28 17       	cp	r18, r24
    15f6:	39 07       	cpc	r19, r25
    15f8:	19 f4       	brne	.+6      	; 0x1600 <_ZN14HardwareSerial4peekEv+0x2e>
    15fa:	2f ef       	ldi	r18, 0xFF	; 255
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	07 c0       	rjmp	.+14     	; 0x160e <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1600:	8d 91       	ld	r24, X+
    1602:	9c 91       	ld	r25, X
    1604:	e8 0f       	add	r30, r24
    1606:	f9 1f       	adc	r31, r25
    1608:	80 81       	ld	r24, Z
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    160e:	c9 01       	movw	r24, r18
    1610:	08 95       	ret

00001612 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1612:	dc 01       	movw	r26, r24
    1614:	1c 96       	adiw	r26, 0x0c	; 12
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	1d 97       	sbiw	r26, 0x0d	; 13
    161c:	e0 5c       	subi	r30, 0xC0	; 192
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	20 81       	ld	r18, Z
    1622:	31 81       	ldd	r19, Z+1	; 0x01
    1624:	e0 54       	subi	r30, 0x40	; 64
    1626:	f0 40       	sbci	r31, 0x00	; 0
    1628:	df 01       	movw	r26, r30
    162a:	ae 5b       	subi	r26, 0xBE	; 190
    162c:	bf 4f       	sbci	r27, 0xFF	; 255
    162e:	8d 91       	ld	r24, X+
    1630:	9c 91       	ld	r25, X
    1632:	11 97       	sbiw	r26, 0x01	; 1
    1634:	28 17       	cp	r18, r24
    1636:	39 07       	cpc	r19, r25
    1638:	19 f4       	brne	.+6      	; 0x1640 <_ZN14HardwareSerial4readEv+0x2e>
    163a:	2f ef       	ldi	r18, 0xFF	; 255
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	10 c0       	rjmp	.+32     	; 0x1660 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1640:	8d 91       	ld	r24, X+
    1642:	9c 91       	ld	r25, X
    1644:	11 97       	sbiw	r26, 0x01	; 1
    1646:	e8 0f       	add	r30, r24
    1648:	f9 1f       	adc	r31, r25
    164a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    164c:	8d 91       	ld	r24, X+
    164e:	9c 91       	ld	r25, X
    1650:	11 97       	sbiw	r26, 0x01	; 1
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	8f 73       	andi	r24, 0x3F	; 63
    1656:	90 70       	andi	r25, 0x00	; 0
    1658:	11 96       	adiw	r26, 0x01	; 1
    165a:	9c 93       	st	X, r25
    165c:	8e 93       	st	-X, r24
    return c;
    165e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1660:	c9 01       	movw	r24, r18
    1662:	08 95       	ret

00001664 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1664:	fc 01       	movw	r30, r24
    1666:	86 85       	ldd	r24, Z+14	; 0x0e
    1668:	97 85       	ldd	r25, Z+15	; 0x0f
    166a:	dc 01       	movw	r26, r24
    166c:	a0 5c       	subi	r26, 0xC0	; 192
    166e:	bf 4f       	sbci	r27, 0xFF	; 255
    1670:	fc 01       	movw	r30, r24
    1672:	ee 5b       	subi	r30, 0xBE	; 190
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	2d 91       	ld	r18, X+
    1678:	3c 91       	ld	r19, X
    167a:	11 97       	sbiw	r26, 0x01	; 1
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	28 17       	cp	r18, r24
    1682:	39 07       	cpc	r19, r25
    1684:	c1 f7       	brne	.-16     	; 0x1676 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    1686:	08 95       	ret

00001688 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
    168e:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1690:	ee 85       	ldd	r30, Y+14	; 0x0e
    1692:	ff 85       	ldd	r31, Y+15	; 0x0f
    1694:	e0 5c       	subi	r30, 0xC0	; 192
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 81       	ld	r24, Z
    169a:	91 81       	ldd	r25, Z+1	; 0x01
    169c:	e0 54       	subi	r30, 0x40	; 64
    169e:	f0 40       	sbci	r31, 0x00	; 0
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	60 e4       	ldi	r22, 0x40	; 64
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
    16aa:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    16ac:	df 01       	movw	r26, r30
    16ae:	ae 5b       	subi	r26, 0xBE	; 190
    16b0:	bf 4f       	sbci	r27, 0xFF	; 255
    16b2:	8d 91       	ld	r24, X+
    16b4:	9c 91       	ld	r25, X
    16b6:	11 97       	sbiw	r26, 0x01	; 1
    16b8:	28 17       	cp	r18, r24
    16ba:	39 07       	cpc	r19, r25
    16bc:	d1 f3       	breq	.-12     	; 0x16b2 <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    16be:	e0 5c       	subi	r30, 0xC0	; 192
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	e0 54       	subi	r30, 0x40	; 64
    16c8:	f0 40       	sbci	r31, 0x00	; 0
    16ca:	e8 0f       	add	r30, r24
    16cc:	f9 1f       	adc	r31, r25
    16ce:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    16d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    16d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    16d4:	e0 5c       	subi	r30, 0xC0	; 192
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	31 83       	std	Z+1, r19	; 0x01
    16da:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    16dc:	ee 89       	ldd	r30, Y+22	; 0x16
    16de:	ff 89       	ldd	r31, Y+23	; 0x17
    16e0:	20 81       	ld	r18, Z
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <_ZN14HardwareSerial5writeEh+0x66>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <_ZN14HardwareSerial5writeEh+0x62>
    16f2:	28 2b       	or	r18, r24
    16f4:	20 83       	st	Z, r18
  
  return 1;
}
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1700:	10 92 b8 05 	sts	0x05B8, r1
    1704:	10 92 b7 05 	sts	0x05B7, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1708:	88 ee       	ldi	r24, 0xE8	; 232
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	80 93 b9 05 	sts	0x05B9, r24
    1714:	90 93 ba 05 	sts	0x05BA, r25
    1718:	a0 93 bb 05 	sts	0x05BB, r26
    171c:	b0 93 bc 05 	sts	0x05BC, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1720:	88 e1       	ldi	r24, 0x18	; 24
    1722:	95 e0       	ldi	r25, 0x05	; 5
    1724:	90 93 b6 05 	sts	0x05B6, r25
    1728:	80 93 b5 05 	sts	0x05B5, r24
{
  _rx_buffer = rx_buffer;
    172c:	8d e2       	ldi	r24, 0x2D	; 45
    172e:	95 e0       	ldi	r25, 0x05	; 5
    1730:	90 93 c2 05 	sts	0x05C2, r25
    1734:	80 93 c1 05 	sts	0x05C1, r24
  _tx_buffer = tx_buffer;
    1738:	81 e7       	ldi	r24, 0x71	; 113
    173a:	95 e0       	ldi	r25, 0x05	; 5
    173c:	90 93 c4 05 	sts	0x05C4, r25
    1740:	80 93 c3 05 	sts	0x05C3, r24
  _ubrrh = ubrrh;
    1744:	85 ec       	ldi	r24, 0xC5	; 197
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	90 93 c6 05 	sts	0x05C6, r25
    174c:	80 93 c5 05 	sts	0x05C5, r24
  _ubrrl = ubrrl;
    1750:	84 ec       	ldi	r24, 0xC4	; 196
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	90 93 c8 05 	sts	0x05C8, r25
    1758:	80 93 c7 05 	sts	0x05C7, r24
  _ucsra = ucsra;
    175c:	80 ec       	ldi	r24, 0xC0	; 192
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	90 93 ca 05 	sts	0x05CA, r25
    1764:	80 93 c9 05 	sts	0x05C9, r24
  _ucsrb = ucsrb;
    1768:	81 ec       	ldi	r24, 0xC1	; 193
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	90 93 cc 05 	sts	0x05CC, r25
    1770:	80 93 cb 05 	sts	0x05CB, r24
  _udr = udr;
    1774:	86 ec       	ldi	r24, 0xC6	; 198
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	90 93 ce 05 	sts	0x05CE, r25
    177c:	80 93 cd 05 	sts	0x05CD, r24
  _rxen = rxen;
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	80 93 cf 05 	sts	0x05CF, r24
  _txen = txen;
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	80 93 d0 05 	sts	0x05D0, r24
  _rxcie = rxcie;
    178c:	87 e0       	ldi	r24, 0x07	; 7
    178e:	80 93 d1 05 	sts	0x05D1, r24
  _udrie = udrie;
    1792:	85 e0       	ldi	r24, 0x05	; 5
    1794:	80 93 d2 05 	sts	0x05D2, r24
  _u2x = u2x;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	80 93 d3 05 	sts	0x05D3, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    179e:	08 95       	ret

000017a0 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	7c 01       	movw	r14, r24
    17b2:	6b 01       	movw	r12, r22
    17b4:	8a 01       	movw	r16, r20
    17b6:	c0 e0       	ldi	r28, 0x00	; 0
    17b8:	d0 e0       	ldi	r29, 0x00	; 0
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    17bc:	d6 01       	movw	r26, r12
    17be:	6d 91       	ld	r22, X+
    17c0:	6d 01       	movw	r12, r26
    17c2:	d7 01       	movw	r26, r14
    17c4:	ed 91       	ld	r30, X+
    17c6:	fc 91       	ld	r31, X
    17c8:	01 90       	ld	r0, Z+
    17ca:	f0 81       	ld	r31, Z
    17cc:	e0 2d       	mov	r30, r0
    17ce:	c7 01       	movw	r24, r14
    17d0:	09 95       	icall
    17d2:	c8 0f       	add	r28, r24
    17d4:	d9 1f       	adc	r29, r25
    17d6:	01 50       	subi	r16, 0x01	; 1
    17d8:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    17da:	01 15       	cp	r16, r1
    17dc:	11 05       	cpc	r17, r1
    17de:	71 f7       	brne	.-36     	; 0x17bc <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    17e0:	ce 01       	movw	r24, r28
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	ef 90       	pop	r14
    17ee:	df 90       	pop	r13
    17f0:	cf 90       	pop	r12
    17f2:	08 95       	ret

000017f4 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    17fe:	dc 01       	movw	r26, r24
    1800:	ed 91       	ld	r30, X+
    1802:	fc 91       	ld	r31, X
    1804:	01 90       	ld	r0, Z+
    1806:	f0 81       	ld	r31, Z
    1808:	e0 2d       	mov	r30, r0
    180a:	6d e0       	ldi	r22, 0x0D	; 13
    180c:	09 95       	icall
    180e:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    1810:	d8 01       	movw	r26, r16
    1812:	ed 91       	ld	r30, X+
    1814:	fc 91       	ld	r31, X
    1816:	01 90       	ld	r0, Z+
    1818:	f0 81       	ld	r31, Z
    181a:	e0 2d       	mov	r30, r0
    181c:	c8 01       	movw	r24, r16
    181e:	6a e0       	ldi	r22, 0x0A	; 10
    1820:	09 95       	icall
    1822:	9c 01       	movw	r18, r24
    1824:	2e 0d       	add	r18, r14
    1826:	3f 1d       	adc	r19, r15
    1828:	c9 01       	movw	r24, r18
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	08 95       	ret

00001834 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	db 01       	movw	r26, r22
    183a:	0d 90       	ld	r0, X+
    183c:	00 20       	and	r0, r0
    183e:	e9 f7       	brne	.-6      	; 0x183a <_ZN5Print5writeEPKc+0x6>
    1840:	11 97       	sbiw	r26, 0x01	; 1
    1842:	a6 1b       	sub	r26, r22
    1844:	b7 0b       	sbc	r27, r23
    1846:	ec 01       	movw	r28, r24
    1848:	e8 81       	ld	r30, Y
    184a:	f9 81       	ldd	r31, Y+1	; 0x01
    184c:	02 80       	ldd	r0, Z+2	; 0x02
    184e:	f3 81       	ldd	r31, Z+3	; 0x03
    1850:	e0 2d       	mov	r30, r0
    1852:	ad 01       	movw	r20, r26
    1854:	09 95       	icall
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	08 95       	ret

0000185c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    185c:	4f 92       	push	r4
    185e:	5f 92       	push	r5
    1860:	7f 92       	push	r7
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	a1 97       	sbiw	r28, 0x21	; 33
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	2c 01       	movw	r4, r24
    188c:	74 2e       	mov	r7, r20
    188e:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1890:	22 30       	cpi	r18, 0x02	; 2
    1892:	08 f4       	brcc	.+2      	; 0x1896 <_ZN5Print11printNumberEmh+0x3a>
    1894:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1896:	19 a2       	std	Y+33, r1	; 0x21
    1898:	31 e2       	ldi	r19, 0x21	; 33
    189a:	c3 2e       	mov	r12, r19
    189c:	d1 2c       	mov	r13, r1
    189e:	cc 0e       	add	r12, r28
    18a0:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    18a2:	82 2e       	mov	r8, r18
    18a4:	99 24       	eor	r9, r9
    18a6:	aa 24       	eor	r10, r10
    18a8:	bb 24       	eor	r11, r11
    18aa:	67 2d       	mov	r22, r7
    18ac:	75 2f       	mov	r23, r21
    18ae:	a5 01       	movw	r20, r10
    18b0:	94 01       	movw	r18, r8
    18b2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodsi4>
    18b6:	79 01       	movw	r14, r18
    18b8:	8a 01       	movw	r16, r20
    char c = m - base * n;
    18ba:	c8 01       	movw	r24, r16
    18bc:	b7 01       	movw	r22, r14
    18be:	a5 01       	movw	r20, r10
    18c0:	94 01       	movw	r18, r8
    18c2:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulsi3>
    18c6:	47 2d       	mov	r20, r7
    18c8:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    18ca:	08 94       	sec
    18cc:	c1 08       	sbc	r12, r1
    18ce:	d1 08       	sbc	r13, r1
    18d0:	4a 30       	cpi	r20, 0x0A	; 10
    18d2:	14 f4       	brge	.+4      	; 0x18d8 <_ZN5Print11printNumberEmh+0x7c>
    18d4:	40 5d       	subi	r20, 0xD0	; 208
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <_ZN5Print11printNumberEmh+0x7e>
    18d8:	49 5c       	subi	r20, 0xC9	; 201
    18da:	f6 01       	movw	r30, r12
    18dc:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    18de:	e1 14       	cp	r14, r1
    18e0:	f1 04       	cpc	r15, r1
    18e2:	01 05       	cpc	r16, r1
    18e4:	11 05       	cpc	r17, r1
    18e6:	21 f0       	breq	.+8      	; 0x18f0 <_ZN5Print11printNumberEmh+0x94>
    18e8:	7e 2c       	mov	r7, r14
    18ea:	5f 2d       	mov	r21, r15
    18ec:	c8 01       	movw	r24, r16
    18ee:	dd cf       	rjmp	.-70     	; 0x18aa <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    18f0:	c2 01       	movw	r24, r4
    18f2:	b6 01       	movw	r22, r12
    18f4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_ZN5Print5writeEPKc>
}
    18f8:	a1 96       	adiw	r28, 0x21	; 33
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	bf 90       	pop	r11
    1916:	af 90       	pop	r10
    1918:	9f 90       	pop	r9
    191a:	8f 90       	pop	r8
    191c:	7f 90       	pop	r7
    191e:	5f 90       	pop	r5
    1920:	4f 90       	pop	r4
    1922:	08 95       	ret

00001924 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1924:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1926:	21 15       	cp	r18, r1
    1928:	31 05       	cpc	r19, r1
    192a:	41 f4       	brne	.+16     	; 0x193c <_ZN5Print5printEmi+0x18>
    192c:	ed 91       	ld	r30, X+
    192e:	fc 91       	ld	r31, X
    1930:	01 90       	ld	r0, Z+
    1932:	f0 81       	ld	r31, Z
    1934:	e0 2d       	mov	r30, r0
    1936:	64 2f       	mov	r22, r20
    1938:	09 95       	icall
    193a:	08 95       	ret
  else return printNumber(n, base);
    193c:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN5Print11printNumberEmh>
}
    1940:	08 95       	ret

00001942 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	6c 01       	movw	r12, r24
    1950:	7b 01       	movw	r14, r22
    1952:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1954:	00 e0       	ldi	r16, 0x00	; 0
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	b8 01       	movw	r22, r16
    195a:	a7 01       	movw	r20, r14
    195c:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN5Print5printEmi>
    1960:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1962:	c6 01       	movw	r24, r12
    1964:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN5Print7printlnEv>
    1968:	08 0f       	add	r16, r24
    196a:	19 1f       	adc	r17, r25
  return n;
}
    196c:	c8 01       	movw	r24, r16
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	08 95       	ret

0000197c <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    197c:	cf 92       	push	r12
    197e:	df 92       	push	r13
    1980:	ef 92       	push	r14
    1982:	ff 92       	push	r15
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	ec 01       	movw	r28, r24
    198e:	6a 01       	movw	r12, r20
    1990:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    1992:	21 15       	cp	r18, r1
    1994:	31 05       	cpc	r19, r1
    1996:	41 f4       	brne	.+16     	; 0x19a8 <_ZN5Print5printEli+0x2c>
    return write(n);
    1998:	e8 81       	ld	r30, Y
    199a:	f9 81       	ldd	r31, Y+1	; 0x01
    199c:	01 90       	ld	r0, Z+
    199e:	f0 81       	ld	r31, Z
    19a0:	e0 2d       	mov	r30, r0
    19a2:	64 2f       	mov	r22, r20
    19a4:	09 95       	icall
    19a6:	1f c0       	rjmp	.+62     	; 0x19e6 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    19a8:	2a 30       	cpi	r18, 0x0A	; 10
    19aa:	31 05       	cpc	r19, r1
    19ac:	d1 f4       	brne	.+52     	; 0x19e2 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    19ae:	77 ff       	sbrs	r23, 7
    19b0:	17 c0       	rjmp	.+46     	; 0x19e0 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    19b2:	e8 81       	ld	r30, Y
    19b4:	f9 81       	ldd	r31, Y+1	; 0x01
    19b6:	01 90       	ld	r0, Z+
    19b8:	f0 81       	ld	r31, Z
    19ba:	e0 2d       	mov	r30, r0
    19bc:	6d e2       	ldi	r22, 0x2D	; 45
    19be:	09 95       	icall
    19c0:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    19c2:	44 27       	eor	r20, r20
    19c4:	55 27       	eor	r21, r21
    19c6:	ba 01       	movw	r22, r20
    19c8:	4c 19       	sub	r20, r12
    19ca:	5d 09       	sbc	r21, r13
    19cc:	6e 09       	sbc	r22, r14
    19ce:	7f 09       	sbc	r23, r15
    19d0:	ce 01       	movw	r24, r28
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN5Print11printNumberEmh>
    19d8:	98 01       	movw	r18, r16
    19da:	28 0f       	add	r18, r24
    19dc:	39 1f       	adc	r19, r25
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    19e0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    19e2:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN5Print11printNumberEmh>
    19e6:	9c 01       	movw	r18, r24
  }
}
    19e8:	c9 01       	movw	r24, r18
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	08 95       	ret

000019fc <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	6c 01       	movw	r12, r24
    1a0a:	7b 01       	movw	r14, r22
    1a0c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1a0e:	00 27       	eor	r16, r16
    1a10:	f7 fc       	sbrc	r15, 7
    1a12:	00 95       	com	r16
    1a14:	10 2f       	mov	r17, r16
    1a16:	b8 01       	movw	r22, r16
    1a18:	a7 01       	movw	r20, r14
    1a1a:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZN5Print5printEli>
    1a1e:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1a20:	c6 01       	movw	r24, r12
    1a22:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN5Print7printlnEv>
    1a26:	08 0f       	add	r16, r24
    1a28:	19 1f       	adc	r17, r25
  return n;
}
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	08 95       	ret

00001a3a <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1a3a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_ZN5Print5writeEPKc>
}
    1a3e:	08 95       	ret

00001a40 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1a4a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_ZN5Print5writeEPKc>
    1a4e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1a50:	c7 01       	movw	r24, r14
    1a52:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN5Print7printlnEv>
    1a56:	08 0f       	add	r16, r24
    1a58:	19 1f       	adc	r17, r25
  return n;
}
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	08 95       	ret

00001a66 <__mulsi3>:
    1a66:	62 9f       	mul	r22, r18
    1a68:	d0 01       	movw	r26, r0
    1a6a:	73 9f       	mul	r23, r19
    1a6c:	f0 01       	movw	r30, r0
    1a6e:	82 9f       	mul	r24, r18
    1a70:	e0 0d       	add	r30, r0
    1a72:	f1 1d       	adc	r31, r1
    1a74:	64 9f       	mul	r22, r20
    1a76:	e0 0d       	add	r30, r0
    1a78:	f1 1d       	adc	r31, r1
    1a7a:	92 9f       	mul	r25, r18
    1a7c:	f0 0d       	add	r31, r0
    1a7e:	83 9f       	mul	r24, r19
    1a80:	f0 0d       	add	r31, r0
    1a82:	74 9f       	mul	r23, r20
    1a84:	f0 0d       	add	r31, r0
    1a86:	65 9f       	mul	r22, r21
    1a88:	f0 0d       	add	r31, r0
    1a8a:	99 27       	eor	r25, r25
    1a8c:	72 9f       	mul	r23, r18
    1a8e:	b0 0d       	add	r27, r0
    1a90:	e1 1d       	adc	r30, r1
    1a92:	f9 1f       	adc	r31, r25
    1a94:	63 9f       	mul	r22, r19
    1a96:	b0 0d       	add	r27, r0
    1a98:	e1 1d       	adc	r30, r1
    1a9a:	f9 1f       	adc	r31, r25
    1a9c:	bd 01       	movw	r22, r26
    1a9e:	cf 01       	movw	r24, r30
    1aa0:	11 24       	eor	r1, r1
    1aa2:	08 95       	ret

00001aa4 <__divmodhi4>:
    1aa4:	97 fb       	bst	r25, 7
    1aa6:	09 2e       	mov	r0, r25
    1aa8:	07 26       	eor	r0, r23
    1aaa:	0a d0       	rcall	.+20     	; 0x1ac0 <__divmodhi4_neg1>
    1aac:	77 fd       	sbrc	r23, 7
    1aae:	04 d0       	rcall	.+8      	; 0x1ab8 <__divmodhi4_neg2>
    1ab0:	2e d0       	rcall	.+92     	; 0x1b0e <__udivmodhi4>
    1ab2:	06 d0       	rcall	.+12     	; 0x1ac0 <__divmodhi4_neg1>
    1ab4:	00 20       	and	r0, r0
    1ab6:	1a f4       	brpl	.+6      	; 0x1abe <__divmodhi4_exit>

00001ab8 <__divmodhi4_neg2>:
    1ab8:	70 95       	com	r23
    1aba:	61 95       	neg	r22
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255

00001abe <__divmodhi4_exit>:
    1abe:	08 95       	ret

00001ac0 <__divmodhi4_neg1>:
    1ac0:	f6 f7       	brtc	.-4      	; 0x1abe <__divmodhi4_exit>
    1ac2:	90 95       	com	r25
    1ac4:	81 95       	neg	r24
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__udivmodsi4>:
    1aca:	a1 e2       	ldi	r26, 0x21	; 33
    1acc:	1a 2e       	mov	r1, r26
    1ace:	aa 1b       	sub	r26, r26
    1ad0:	bb 1b       	sub	r27, r27
    1ad2:	fd 01       	movw	r30, r26
    1ad4:	0d c0       	rjmp	.+26     	; 0x1af0 <__udivmodsi4_ep>

00001ad6 <__udivmodsi4_loop>:
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	ee 1f       	adc	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	a2 17       	cp	r26, r18
    1ae0:	b3 07       	cpc	r27, r19
    1ae2:	e4 07       	cpc	r30, r20
    1ae4:	f5 07       	cpc	r31, r21
    1ae6:	20 f0       	brcs	.+8      	; 0x1af0 <__udivmodsi4_ep>
    1ae8:	a2 1b       	sub	r26, r18
    1aea:	b3 0b       	sbc	r27, r19
    1aec:	e4 0b       	sbc	r30, r20
    1aee:	f5 0b       	sbc	r31, r21

00001af0 <__udivmodsi4_ep>:
    1af0:	66 1f       	adc	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	88 1f       	adc	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	1a 94       	dec	r1
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <__udivmodsi4_loop>
    1afc:	60 95       	com	r22
    1afe:	70 95       	com	r23
    1b00:	80 95       	com	r24
    1b02:	90 95       	com	r25
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	bd 01       	movw	r22, r26
    1b0a:	cf 01       	movw	r24, r30
    1b0c:	08 95       	ret

00001b0e <__udivmodhi4>:
    1b0e:	aa 1b       	sub	r26, r26
    1b10:	bb 1b       	sub	r27, r27
    1b12:	51 e1       	ldi	r21, 0x11	; 17
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <__udivmodhi4_ep>

00001b16 <__udivmodhi4_loop>:
    1b16:	aa 1f       	adc	r26, r26
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	a6 17       	cp	r26, r22
    1b1c:	b7 07       	cpc	r27, r23
    1b1e:	10 f0       	brcs	.+4      	; 0x1b24 <__udivmodhi4_ep>
    1b20:	a6 1b       	sub	r26, r22
    1b22:	b7 0b       	sbc	r27, r23

00001b24 <__udivmodhi4_ep>:
    1b24:	88 1f       	adc	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	5a 95       	dec	r21
    1b2a:	a9 f7       	brne	.-22     	; 0x1b16 <__udivmodhi4_loop>
    1b2c:	80 95       	com	r24
    1b2e:	90 95       	com	r25
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	08 95       	ret

00001b36 <__prologue_saves__>:
    1b36:	2f 92       	push	r2
    1b38:	3f 92       	push	r3
    1b3a:	4f 92       	push	r4
    1b3c:	5f 92       	push	r5
    1b3e:	6f 92       	push	r6
    1b40:	7f 92       	push	r7
    1b42:	8f 92       	push	r8
    1b44:	9f 92       	push	r9
    1b46:	af 92       	push	r10
    1b48:	bf 92       	push	r11
    1b4a:	cf 92       	push	r12
    1b4c:	df 92       	push	r13
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	ca 1b       	sub	r28, r26
    1b60:	db 0b       	sbc	r29, r27
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	09 94       	ijmp

00001b6e <__epilogue_restores__>:
    1b6e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b70:	39 88       	ldd	r3, Y+17	; 0x11
    1b72:	48 88       	ldd	r4, Y+16	; 0x10
    1b74:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b76:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b78:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b80:	b9 84       	ldd	r11, Y+9	; 0x09
    1b82:	c8 84       	ldd	r12, Y+8	; 0x08
    1b84:	df 80       	ldd	r13, Y+7	; 0x07
    1b86:	ee 80       	ldd	r14, Y+6	; 0x06
    1b88:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b8c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b8e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b90:	b9 81       	ldd	r27, Y+1	; 0x01
    1b92:	ce 0f       	add	r28, r30
    1b94:	d1 1d       	adc	r29, r1
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	ed 01       	movw	r28, r26
    1ba2:	08 95       	ret

00001ba4 <__tablejump2__>:
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31

00001ba8 <__tablejump__>:
    1ba8:	05 90       	lpm	r0, Z+
    1baa:	f4 91       	lpm	r31, Z+
    1bac:	e0 2d       	mov	r30, r0
    1bae:	09 94       	ijmp

00001bb0 <_exit>:
    1bb0:	f8 94       	cli

00001bb2 <__stop_program>:
    1bb2:	ff cf       	rjmp	.-2      	; 0x1bb2 <__stop_program>
